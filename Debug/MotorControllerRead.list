
MotorControllerRead.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041ac  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004334  08004334  00005334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800436c  0800436c  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800436c  0800436c  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800436c  0800436c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800436c  0800436c  0000536c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004370  08004370  00005370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004374  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          0000011c  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000128  20000128  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a556  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001624  00000000  00000000  00010592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d0  00000000  00000000  00011bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005fe  00000000  00000000  00012388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019da7  00000000  00000000  00012986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000097eb  00000000  00000000  0002c72d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099879  00000000  00000000  00035f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000cf791  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002074  00000000  00000000  000cf7d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000090  00000000  00000000  000d1848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800431c 	.word	0x0800431c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800431c 	.word	0x0800431c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint32_t TxMailbox;
CAN_TxHeaderTypeDef TxHeader;
uint8_t TxData[8];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800096c:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 800096e:	4a07      	ldr	r2, [pc, #28]	@ (800098c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000970:	2100      	movs	r1, #0
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f001 f8b9 	bl	8001aea <HAL_CAN_GetRxMessage>
	received = true;
 8000978:	4b05      	ldr	r3, [pc, #20]	@ (8000990 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200000f8 	.word	0x200000f8
 800098c:	200000dc 	.word	0x200000dc
 8000990:	200000d8 	.word	0x200000d8

08000994 <sendMessage8>:

void sendMessage8(int DLC, int d0, int d1, int d2, int d3, int d4, int d5, int d6, int d7)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
 80009a0:	603b      	str	r3, [r7, #0]
	received = false;
 80009a2:	4b24      	ldr	r3, [pc, #144]	@ (8000a34 <sendMessage8+0xa0>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]

	  TxHeader.DLC = DLC;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	4a23      	ldr	r2, [pc, #140]	@ (8000a38 <sendMessage8+0xa4>)
 80009ac:	6113      	str	r3, [r2, #16]
	  TxHeader.IDE = CAN_ID_STD;
 80009ae:	4b22      	ldr	r3, [pc, #136]	@ (8000a38 <sendMessage8+0xa4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
	  TxHeader.RTR = CAN_RTR_DATA;
 80009b4:	4b20      	ldr	r3, [pc, #128]	@ (8000a38 <sendMessage8+0xa4>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
	  TxHeader.StdId = 0x6B; // ID
 80009ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000a38 <sendMessage8+0xa4>)
 80009bc:	226b      	movs	r2, #107	@ 0x6b
 80009be:	601a      	str	r2, [r3, #0]

	  TxData[0] = d0;
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a3c <sendMessage8+0xa8>)
 80009c6:	701a      	strb	r2, [r3, #0]
	  TxData[1] = d1;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a3c <sendMessage8+0xa8>)
 80009ce:	705a      	strb	r2, [r3, #1]
	  TxData[2] = d2;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	4b19      	ldr	r3, [pc, #100]	@ (8000a3c <sendMessage8+0xa8>)
 80009d6:	709a      	strb	r2, [r3, #2]
	  TxData[3] = d3;
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	4b17      	ldr	r3, [pc, #92]	@ (8000a3c <sendMessage8+0xa8>)
 80009de:	70da      	strb	r2, [r3, #3]
	  TxData[4] = d4;
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	4b15      	ldr	r3, [pc, #84]	@ (8000a3c <sendMessage8+0xa8>)
 80009e6:	711a      	strb	r2, [r3, #4]
	  TxData[5] = d5;
 80009e8:	6a3b      	ldr	r3, [r7, #32]
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	4b13      	ldr	r3, [pc, #76]	@ (8000a3c <sendMessage8+0xa8>)
 80009ee:	715a      	strb	r2, [r3, #5]
	  TxData[6] = d6;
 80009f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	4b11      	ldr	r3, [pc, #68]	@ (8000a3c <sendMessage8+0xa8>)
 80009f6:	719a      	strb	r2, [r3, #6]
	  TxData[7] = d7;
 80009f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a3c <sendMessage8+0xa8>)
 80009fe:	71da      	strb	r2, [r3, #7]

	  if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) while(true)
 8000a00:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <sendMessage8+0xac>)
 8000a02:	4a0e      	ldr	r2, [pc, #56]	@ (8000a3c <sendMessage8+0xa8>)
 8000a04:	490c      	ldr	r1, [pc, #48]	@ (8000a38 <sendMessage8+0xa4>)
 8000a06:	480f      	ldr	r0, [pc, #60]	@ (8000a44 <sendMessage8+0xb0>)
 8000a08:	f000 ff9f 	bl	800194a <HAL_CAN_AddTxMessage>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d008      	beq.n	8000a24 <sendMessage8+0x90>
	  {
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000a12:	2108      	movs	r1, #8
 8000a14:	480c      	ldr	r0, [pc, #48]	@ (8000a48 <sendMessage8+0xb4>)
 8000a16:	f001 fe7b 	bl	8002710 <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 8000a1a:	2064      	movs	r0, #100	@ 0x64
 8000a1c:	f000 fd68 	bl	80014f0 <HAL_Delay>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000a20:	bf00      	nop
 8000a22:	e7f6      	b.n	8000a12 <sendMessage8+0x7e>
	  }
	  HAL_Delay(100);
 8000a24:	2064      	movs	r0, #100	@ 0x64
 8000a26:	f000 fd63 	bl	80014f0 <HAL_Delay>
}
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200000d8 	.word	0x200000d8
 8000a38:	20000104 	.word	0x20000104
 8000a3c:	2000011c 	.word	0x2000011c
 8000a40:	20000100 	.word	0x20000100
 8000a44:	20000028 	.word	0x20000028
 8000a48:	48000400 	.word	0x48000400

08000a4c <sendMessage7>:

void sendMessage7(int DLC, int d0, int d1, int d2, int d3, int d4, int d5, int d6)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	@ 0x28
 8000a50:	af06      	add	r7, sp, #24
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
 8000a58:	603b      	str	r3, [r7, #0]
	sendMessage8(DLC, d0, d1, d2, d3, d4, d5, d6, 0);
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	9304      	str	r3, [sp, #16]
 8000a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a60:	9303      	str	r3, [sp, #12]
 8000a62:	6a3b      	ldr	r3, [r7, #32]
 8000a64:	9302      	str	r3, [sp, #8]
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	9301      	str	r3, [sp, #4]
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	68b9      	ldr	r1, [r7, #8]
 8000a74:	68f8      	ldr	r0, [r7, #12]
 8000a76:	f7ff ff8d 	bl	8000994 <sendMessage8>
}
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <sendMessage6>:

void sendMessage6(int DLC, int d0, int d1, int d2, int d3, int d4, int d5)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b088      	sub	sp, #32
 8000a86:	af04      	add	r7, sp, #16
 8000a88:	60f8      	str	r0, [r7, #12]
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
 8000a8e:	603b      	str	r3, [r7, #0]
	sendMessage7(DLC, d0, d1, d2, d3, d4, d5, 0);
 8000a90:	2300      	movs	r3, #0
 8000a92:	9303      	str	r3, [sp, #12]
 8000a94:	6a3b      	ldr	r3, [r7, #32]
 8000a96:	9302      	str	r3, [sp, #8]
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	9301      	str	r3, [sp, #4]
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	9300      	str	r3, [sp, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	68b9      	ldr	r1, [r7, #8]
 8000aa6:	68f8      	ldr	r0, [r7, #12]
 8000aa8:	f7ff ffd0 	bl	8000a4c <sendMessage7>
}
 8000aac:	bf00      	nop
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <sendMessage5>:

void sendMessage5(int DLC, int d0, int d1, int d2, int d3, int d4)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b088      	sub	sp, #32
 8000ab8:	af04      	add	r7, sp, #16
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
 8000ac0:	603b      	str	r3, [r7, #0]
	sendMessage6(DLC, d0, d1, d2, d3, d4, 0);
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	9302      	str	r3, [sp, #8]
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	9301      	str	r3, [sp, #4]
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	68b9      	ldr	r1, [r7, #8]
 8000ad4:	68f8      	ldr	r0, [r7, #12]
 8000ad6:	f7ff ffd4 	bl	8000a82 <sendMessage6>
}
 8000ada:	bf00      	nop
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <sendMessage4>:

void sendMessage4(int DLC, int d0, int d1, int d2, int d3)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b086      	sub	sp, #24
 8000ae6:	af02      	add	r7, sp, #8
 8000ae8:	60f8      	str	r0, [r7, #12]
 8000aea:	60b9      	str	r1, [r7, #8]
 8000aec:	607a      	str	r2, [r7, #4]
 8000aee:	603b      	str	r3, [r7, #0]
	sendMessage5(DLC, d0, d1, d2, d3, 0);
 8000af0:	2300      	movs	r3, #0
 8000af2:	9301      	str	r3, [sp, #4]
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	9300      	str	r3, [sp, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	68b9      	ldr	r1, [r7, #8]
 8000afe:	68f8      	ldr	r0, [r7, #12]
 8000b00:	f7ff ffd8 	bl	8000ab4 <sendMessage5>
}
 8000b04:	bf00      	nop
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <sendMessage3>:

void sendMessage3(int DLC, int d0, int d1, int d2)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af02      	add	r7, sp, #8
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
 8000b18:	603b      	str	r3, [r7, #0]
	sendMessage4(DLC, d0, d1, d2, 0);
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	68b9      	ldr	r1, [r7, #8]
 8000b24:	68f8      	ldr	r0, [r7, #12]
 8000b26:	f7ff ffdc 	bl	8000ae2 <sendMessage4>
}
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <sendMessage2>:

void sendMessage2(int DLC, int d0, int d1)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b084      	sub	sp, #16
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	60f8      	str	r0, [r7, #12]
 8000b3a:	60b9      	str	r1, [r7, #8]
 8000b3c:	607a      	str	r2, [r7, #4]
	sendMessage3(DLC, d0, d1, 0);
 8000b3e:	2300      	movs	r3, #0
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	68b9      	ldr	r1, [r7, #8]
 8000b44:	68f8      	ldr	r0, [r7, #12]
 8000b46:	f7ff ffe1 	bl	8000b0c <sendMessage3>
}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <sendMessage1>:

void sendMessage1(int DLC, int d0)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
 8000b5a:	6039      	str	r1, [r7, #0]
	sendMessage2(DLC, d0, 0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	6839      	ldr	r1, [r7, #0]
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff ffe6 	bl	8000b32 <sendMessage2>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <waitForMessage>:
{
	sendMessage1(DLC, 0);
}

void waitForMessage()
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000b74:	2108      	movs	r1, #8
 8000b76:	480d      	ldr	r0, [pc, #52]	@ (8000bac <waitForMessage+0x3c>)
 8000b78:	f001 fdca 	bl	8002710 <HAL_GPIO_TogglePin>
	while(!received)
 8000b7c:	e007      	b.n	8000b8e <waitForMessage+0x1e>
	{
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000b7e:	2108      	movs	r1, #8
 8000b80:	480a      	ldr	r0, [pc, #40]	@ (8000bac <waitForMessage+0x3c>)
 8000b82:	f001 fdc5 	bl	8002710 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000b86:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b8a:	f000 fcb1 	bl	80014f0 <HAL_Delay>
	while(!received)
 8000b8e:	4b08      	ldr	r3, [pc, #32]	@ (8000bb0 <waitForMessage+0x40>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	f083 0301 	eor.w	r3, r3, #1
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d1f0      	bne.n	8000b7e <waitForMessage+0xe>
	}
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2108      	movs	r1, #8
 8000ba0:	4802      	ldr	r0, [pc, #8]	@ (8000bac <waitForMessage+0x3c>)
 8000ba2:	f001 fd9d 	bl	80026e0 <HAL_GPIO_WritePin>
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	48000400 	.word	0x48000400
 8000bb0:	200000d8 	.word	0x200000d8
 8000bb4:	00000000 	.word	0x00000000

08000bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b0aa      	sub	sp, #168	@ 0xa8
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bbe:	f000 fc31 	bl	8001424 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc2:	f000 f9a7 	bl	8000f14 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init();
 8000bc6:	f000 fa6b 	bl	80010a0 <MX_GPIO_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bca:	f000 fa69 	bl	80010a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bce:	f000 fa37 	bl	8001040 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000bd2:	f000 f9e1 	bl	8000f98 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8000bd6:	4822      	ldr	r0, [pc, #136]	@ (8000c60 <main+0xa8>)
 8000bd8:	f000 fe73 	bl	80018c2 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000bdc:	2102      	movs	r1, #2
 8000bde:	4820      	ldr	r0, [pc, #128]	@ (8000c60 <main+0xa8>)
 8000be0:	f001 f8a5 	bl	8001d2e <HAL_CAN_ActivateNotification>
  HAL_Delay(30);
 8000be4:	201e      	movs	r0, #30
 8000be6:	f000 fc83 	bl	80014f0 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000bea:	2201      	movs	r2, #1
 8000bec:	2108      	movs	r1, #8
 8000bee:	481d      	ldr	r0, [pc, #116]	@ (8000c64 <main+0xac>)
 8000bf0:	f001 fd76 	bl	80026e0 <HAL_GPIO_WritePin>


	sendMessage1(1, 0xFF);//CCP_FLASH_READ   INFO_MODULE_NAME, get controller model
 8000bf4:	21ff      	movs	r1, #255	@ 0xff
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	f7ff ffab 	bl	8000b52 <sendMessage1>
	waitForMessage();
 8000bfc:	f7ff ffb8 	bl	8000b70 <waitForMessage>
	int error = RxData[0];
 8000c00:	4b19      	ldr	r3, [pc, #100]	@ (8000c68 <main+0xb0>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

	sendMessage3(3, 0xF2, 64, 8);//CCP_FLASH_READ   INFO_MODULE_NAME, get controller model
 8000c08:	2308      	movs	r3, #8
 8000c0a:	2240      	movs	r2, #64	@ 0x40
 8000c0c:	21f2      	movs	r1, #242	@ 0xf2
 8000c0e:	2003      	movs	r0, #3
 8000c10:	f7ff ff7c 	bl	8000b0c <sendMessage3>
	waitForMessage();
 8000c14:	f7ff ffac 	bl	8000b70 <waitForMessage>
	char model[8];
	for(int i = 0; i < 8; i++) model[i] = (char)RxData[i];
 8000c18:	2300      	movs	r3, #0
 8000c1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000c1e:	e00f      	b.n	8000c40 <main+0x88>
 8000c20:	4a11      	ldr	r2, [pc, #68]	@ (8000c68 <main+0xb0>)
 8000c22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000c26:	4413      	add	r3, r2
 8000c28:	7819      	ldrb	r1, [r3, #0]
 8000c2a:	1d3a      	adds	r2, r7, #4
 8000c2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000c30:	4413      	add	r3, r2
 8000c32:	460a      	mov	r2, r1
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000c40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000c44:	2b07      	cmp	r3, #7
 8000c46:	ddeb      	ble.n	8000c20 <main+0x68>



	sendMessage3(3, 0xF2, 83, 2);//CCP_FLASH_READ   INFO_SOFTWARE_VER, get controller software version
 8000c48:	2302      	movs	r3, #2
 8000c4a:	2253      	movs	r2, #83	@ 0x53
 8000c4c:	21f2      	movs	r1, #242	@ 0xf2
 8000c4e:	2003      	movs	r0, #3
 8000c50:	f7ff ff5c 	bl	8000b0c <sendMessage3>
	waitForMessage();
 8000c54:	f7ff ff8c 	bl	8000b70 <waitForMessage>
	uint8_t version[2];
	for(int i = 0; i < 2; i++) model[i] = RxData[i];
 8000c58:	2300      	movs	r3, #0
 8000c5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000c5e:	e015      	b.n	8000c8c <main+0xd4>
 8000c60:	20000028 	.word	0x20000028
 8000c64:	48000400 	.word	0x48000400
 8000c68:	200000f8 	.word	0x200000f8
 8000c6c:	4aa4      	ldr	r2, [pc, #656]	@ (8000f00 <main+0x348>)
 8000c6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000c72:	4413      	add	r3, r2
 8000c74:	7819      	ldrb	r1, [r3, #0]
 8000c76:	1d3a      	adds	r2, r7, #4
 8000c78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000c7c:	4413      	add	r3, r2
 8000c7e:	460a      	mov	r2, r1
 8000c80:	701a      	strb	r2, [r3, #0]
 8000c82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000c86:	3301      	adds	r3, #1
 8000c88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000c8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	ddeb      	ble.n	8000c6c <main+0xb4>



	sendMessage3(3, 0xF2, 4, 1);//CCP_FLASH_READ   CAL_TPS_DEAD_ZONE_LOW, get throttle low dead zone
 8000c94:	2301      	movs	r3, #1
 8000c96:	2204      	movs	r2, #4
 8000c98:	21f2      	movs	r1, #242	@ 0xf2
 8000c9a:	2003      	movs	r0, #3
 8000c9c:	f7ff ff36 	bl	8000b0c <sendMessage3>
	waitForMessage();
 8000ca0:	f7ff ff66 	bl	8000b70 <waitForMessage>
	int TLDeadZone = RxData[0]/2;
 8000ca4:	4b96      	ldr	r3, [pc, #600]	@ (8000f00 <main+0x348>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	085b      	lsrs	r3, r3, #1
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98



	sendMessage3(3, 0xF2, 5, 1);//CCP_FLASH_READ   CAL_TPS_DEAD_ZONE_HIGH, get throttle high dead zone
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	2205      	movs	r2, #5
 8000cb4:	21f2      	movs	r1, #242	@ 0xf2
 8000cb6:	2003      	movs	r0, #3
 8000cb8:	f7ff ff28 	bl	8000b0c <sendMessage3>
	waitForMessage();
 8000cbc:	f7ff ff58 	bl	8000b70 <waitForMessage>
	int THDeadZone = RxData[0]/2;
 8000cc0:	4b8f      	ldr	r3, [pc, #572]	@ (8000f00 <main+0x348>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	085b      	lsrs	r3, r3, #1
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94



	sendMessage3(3, 0xF2, 38, 1);//CCP_FLASH_READ   CAL_BRAKE_DEAD_ZONE_LOW, get brake low dead zone
 8000ccc:	2301      	movs	r3, #1
 8000cce:	2226      	movs	r2, #38	@ 0x26
 8000cd0:	21f2      	movs	r1, #242	@ 0xf2
 8000cd2:	2003      	movs	r0, #3
 8000cd4:	f7ff ff1a 	bl	8000b0c <sendMessage3>
	waitForMessage();
 8000cd8:	f7ff ff4a 	bl	8000b70 <waitForMessage>
	int BLDeadZone = RxData[0];
 8000cdc:	4b88      	ldr	r3, [pc, #544]	@ (8000f00 <main+0x348>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90



	sendMessage3(3, 0xF2, 39, 1);//CCP_FLASH_READ   CAL_BRAKE_DEAD_ZONE_HIGH, get brake high dead zone
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	2227      	movs	r2, #39	@ 0x27
 8000ce8:	21f2      	movs	r1, #242	@ 0xf2
 8000cea:	2003      	movs	r0, #3
 8000cec:	f7ff ff0e 	bl	8000b0c <sendMessage3>
	waitForMessage();
 8000cf0:	f7ff ff3e 	bl	8000b70 <waitForMessage>
	int BHDeadZone = RxData[0];
 8000cf4:	4b82      	ldr	r3, [pc, #520]	@ (8000f00 <main+0x348>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c



	sendMessage1(1, 0x1B);//CCP_A2D_BATCH_READ1, BrakeA/D  TPS A/D  Operation Voltage A/D  Vs A/D  B+ A/D
 8000cfc:	211b      	movs	r1, #27
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f7ff ff27 	bl	8000b52 <sendMessage1>
	waitForMessage();
 8000d04:	f7ff ff34 	bl	8000b70 <waitForMessage>
	double BrakeAD = RxData[0]/51.0;
 8000d08:	4b7d      	ldr	r3, [pc, #500]	@ (8000f00 <main+0x348>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fbad 	bl	800046c <__aeabi_i2d>
 8000d12:	f04f 0200 	mov.w	r2, #0
 8000d16:	4b7b      	ldr	r3, [pc, #492]	@ (8000f04 <main+0x34c>)
 8000d18:	f7ff fd3c 	bl	8000794 <__aeabi_ddiv>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	460b      	mov	r3, r1
 8000d20:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	double TPSAD = RxData[1]/51.0;
 8000d24:	4b76      	ldr	r3, [pc, #472]	@ (8000f00 <main+0x348>)
 8000d26:	785b      	ldrb	r3, [r3, #1]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fb9f 	bl	800046c <__aeabi_i2d>
 8000d2e:	f04f 0200 	mov.w	r2, #0
 8000d32:	4b74      	ldr	r3, [pc, #464]	@ (8000f04 <main+0x34c>)
 8000d34:	f7ff fd2e 	bl	8000794 <__aeabi_ddiv>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	double OpVAD = RxData[2]/2.05;
 8000d40:	4b6f      	ldr	r3, [pc, #444]	@ (8000f00 <main+0x348>)
 8000d42:	789b      	ldrb	r3, [r3, #2]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fb91 	bl	800046c <__aeabi_i2d>
 8000d4a:	a36b      	add	r3, pc, #428	@ (adr r3, 8000ef8 <main+0x340>)
 8000d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d50:	f7ff fd20 	bl	8000794 <__aeabi_ddiv>
 8000d54:	4602      	mov	r2, r0
 8000d56:	460b      	mov	r3, r1
 8000d58:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	double VsAD = RxData[3]/25.0;
 8000d5c:	4b68      	ldr	r3, [pc, #416]	@ (8000f00 <main+0x348>)
 8000d5e:	78db      	ldrb	r3, [r3, #3]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fb83 	bl	800046c <__aeabi_i2d>
 8000d66:	f04f 0200 	mov.w	r2, #0
 8000d6a:	4b67      	ldr	r3, [pc, #412]	@ (8000f08 <main+0x350>)
 8000d6c:	f7ff fd12 	bl	8000794 <__aeabi_ddiv>
 8000d70:	4602      	mov	r2, r0
 8000d72:	460b      	mov	r3, r1
 8000d74:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	double BPAD = RxData[4]/2.05;
 8000d78:	4b61      	ldr	r3, [pc, #388]	@ (8000f00 <main+0x348>)
 8000d7a:	791b      	ldrb	r3, [r3, #4]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fb75 	bl	800046c <__aeabi_i2d>
 8000d82:	a35d      	add	r3, pc, #372	@ (adr r3, 8000ef8 <main+0x340>)
 8000d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d88:	f7ff fd04 	bl	8000794 <__aeabi_ddiv>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	460b      	mov	r3, r1
 8000d90:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60



	sendMessage1(1, 0x1A);//CCP_A2D_BATCH_READ2, la A/D  lb A/D  lc A/D Va A/D  Vb A/D  Vc A/D
 8000d94:	211a      	movs	r1, #26
 8000d96:	2001      	movs	r0, #1
 8000d98:	f7ff fedb 	bl	8000b52 <sendMessage1>
	waitForMessage();
 8000d9c:	f7ff fee8 	bl	8000b70 <waitForMessage>
	int laAD = RxData[0];
 8000da0:	4b57      	ldr	r3, [pc, #348]	@ (8000f00 <main+0x348>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	65fb      	str	r3, [r7, #92]	@ 0x5c
	int lbAD = RxData[1];
 8000da6:	4b56      	ldr	r3, [pc, #344]	@ (8000f00 <main+0x348>)
 8000da8:	785b      	ldrb	r3, [r3, #1]
 8000daa:	65bb      	str	r3, [r7, #88]	@ 0x58
	int lcAD = RxData[2];
 8000dac:	4b54      	ldr	r3, [pc, #336]	@ (8000f00 <main+0x348>)
 8000dae:	789b      	ldrb	r3, [r3, #2]
 8000db0:	657b      	str	r3, [r7, #84]	@ 0x54
	double VaAD = RxData[3]/2.05;
 8000db2:	4b53      	ldr	r3, [pc, #332]	@ (8000f00 <main+0x348>)
 8000db4:	78db      	ldrb	r3, [r3, #3]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fb58 	bl	800046c <__aeabi_i2d>
 8000dbc:	a34e      	add	r3, pc, #312	@ (adr r3, 8000ef8 <main+0x340>)
 8000dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc2:	f7ff fce7 	bl	8000794 <__aeabi_ddiv>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	460b      	mov	r3, r1
 8000dca:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	double VbAD = RxData[4]/2.05;
 8000dce:	4b4c      	ldr	r3, [pc, #304]	@ (8000f00 <main+0x348>)
 8000dd0:	791b      	ldrb	r3, [r3, #4]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fb4a 	bl	800046c <__aeabi_i2d>
 8000dd8:	a347      	add	r3, pc, #284	@ (adr r3, 8000ef8 <main+0x340>)
 8000dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dde:	f7ff fcd9 	bl	8000794 <__aeabi_ddiv>
 8000de2:	4602      	mov	r2, r0
 8000de4:	460b      	mov	r3, r1
 8000de6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	double VcAD = RxData[5]/2.05;
 8000dea:	4b45      	ldr	r3, [pc, #276]	@ (8000f00 <main+0x348>)
 8000dec:	795b      	ldrb	r3, [r3, #5]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fb3c 	bl	800046c <__aeabi_i2d>
 8000df4:	a340      	add	r3, pc, #256	@ (adr r3, 8000ef8 <main+0x340>)
 8000df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dfa:	f7ff fccb 	bl	8000794 <__aeabi_ddiv>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	460b      	mov	r3, r1
 8000e02:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38



	sendMessage1(1, 0x33);//CCP_MONITOR1, PWM  enable motor rotation  mototr temp  controller temp  hot end MOSFET  cold end MOSFET
 8000e06:	2133      	movs	r1, #51	@ 0x33
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f7ff fea2 	bl	8000b52 <sendMessage1>
	waitForMessage();
 8000e0e:	f7ff feaf 	bl	8000b70 <waitForMessage>
	int PWM = RxData[0];
 8000e12:	4b3b      	ldr	r3, [pc, #236]	@ (8000f00 <main+0x348>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	637b      	str	r3, [r7, #52]	@ 0x34
	bool motorOn = RxData[1] == 1;
 8000e18:	4b39      	ldr	r3, [pc, #228]	@ (8000f00 <main+0x348>)
 8000e1a:	785b      	ldrb	r3, [r3, #1]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	bf0c      	ite	eq
 8000e20:	2301      	moveq	r3, #1
 8000e22:	2300      	movne	r3, #0
 8000e24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	int motorTemp = RxData[2] - 80;
 8000e28:	4b35      	ldr	r3, [pc, #212]	@ (8000f00 <main+0x348>)
 8000e2a:	789b      	ldrb	r3, [r3, #2]
 8000e2c:	3b50      	subs	r3, #80	@ 0x50
 8000e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int motorTempF = motorTemp * 9/5 + 32;
 8000e30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e32:	4613      	mov	r3, r2
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	4413      	add	r3, r2
 8000e38:	4a34      	ldr	r2, [pc, #208]	@ (8000f0c <main+0x354>)
 8000e3a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e3e:	1052      	asrs	r2, r2, #1
 8000e40:	17db      	asrs	r3, r3, #31
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	3320      	adds	r3, #32
 8000e46:	62bb      	str	r3, [r7, #40]	@ 0x28
	bool motorTempConnected = motorTemp != 0xFF;
 8000e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e4a:	2bff      	cmp	r3, #255	@ 0xff
 8000e4c:	bf14      	ite	ne
 8000e4e:	2301      	movne	r3, #1
 8000e50:	2300      	moveq	r3, #0
 8000e52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int ContTemp = RxData[3];
 8000e56:	4b2a      	ldr	r3, [pc, #168]	@ (8000f00 <main+0x348>)
 8000e58:	78db      	ldrb	r3, [r3, #3]
 8000e5a:	623b      	str	r3, [r7, #32]
	int ContTempHighMOSFET = RxData[4];
 8000e5c:	4b28      	ldr	r3, [pc, #160]	@ (8000f00 <main+0x348>)
 8000e5e:	791b      	ldrb	r3, [r3, #4]
 8000e60:	61fb      	str	r3, [r7, #28]
	int ContTempLowMOSFET = RxData[5];
 8000e62:	4b27      	ldr	r3, [pc, #156]	@ (8000f00 <main+0x348>)
 8000e64:	795b      	ldrb	r3, [r3, #5]
 8000e66:	61bb      	str	r3, [r7, #24]



	sendMessage1(1, 0x37);//CCP_MONITOR2, RPM  present current accounts for percent of the rated current of controller
 8000e68:	2137      	movs	r1, #55	@ 0x37
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f7ff fe71 	bl	8000b52 <sendMessage1>
	waitForMessage();
 8000e70:	f7ff fe7e 	bl	8000b70 <waitForMessage>
	int RPM = RxData[0] * 256;
 8000e74:	4b22      	ldr	r3, [pc, #136]	@ (8000f00 <main+0x348>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	021b      	lsls	r3, r3, #8
 8000e7a:	617b      	str	r3, [r7, #20]
	RPM += RxData[1];
 8000e7c:	4b20      	ldr	r3, [pc, #128]	@ (8000f00 <main+0x348>)
 8000e7e:	785b      	ldrb	r3, [r3, #1]
 8000e80:	461a      	mov	r2, r3
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	4413      	add	r3, r2
 8000e86:	617b      	str	r3, [r7, #20]
	int PCAFPOTRCOC = RxData[2];
 8000e88:	4b1d      	ldr	r3, [pc, #116]	@ (8000f00 <main+0x348>)
 8000e8a:	789b      	ldrb	r3, [r3, #2]
 8000e8c:	613b      	str	r3, [r7, #16]



	sendMessage2(2, 0x42, 0);//COM_SW_ACC, Throttle switch
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2142      	movs	r1, #66	@ 0x42
 8000e92:	2002      	movs	r0, #2
 8000e94:	f7ff fe4d 	bl	8000b32 <sendMessage2>
	waitForMessage();
 8000e98:	f7ff fe6a 	bl	8000b70 <waitForMessage>
	bool throttleSwitch = RxData[0] == 1;
 8000e9c:	4b18      	ldr	r3, [pc, #96]	@ (8000f00 <main+0x348>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	bf0c      	ite	eq
 8000ea4:	2301      	moveq	r3, #1
 8000ea6:	2300      	movne	r3, #0
 8000ea8:	73fb      	strb	r3, [r7, #15]



	sendMessage2(2, 0x43, 0);//COM_SW_BRK, Brake switch
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2143      	movs	r1, #67	@ 0x43
 8000eae:	2002      	movs	r0, #2
 8000eb0:	f7ff fe3f 	bl	8000b32 <sendMessage2>
	waitForMessage();
 8000eb4:	f7ff fe5c 	bl	8000b70 <waitForMessage>
	bool BrakeSwitch = RxData[0] == 1;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	@ (8000f00 <main+0x348>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	bf0c      	ite	eq
 8000ec0:	2301      	moveq	r3, #1
 8000ec2:	2300      	movne	r3, #0
 8000ec4:	73bb      	strb	r3, [r7, #14]



	sendMessage2(2, 0x44, 0);//COM_SW_REV, Reverse switch
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2144      	movs	r1, #68	@ 0x44
 8000eca:	2002      	movs	r0, #2
 8000ecc:	f7ff fe31 	bl	8000b32 <sendMessage2>
	waitForMessage();
 8000ed0:	f7ff fe4e 	bl	8000b70 <waitForMessage>
	bool ReverseSwitch = RxData[0] == 1;
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f00 <main+0x348>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	bf0c      	ite	eq
 8000edc:	2301      	moveq	r3, #1
 8000ede:	2300      	movne	r3, #0
 8000ee0:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2108      	movs	r1, #8
 8000ee6:	480a      	ldr	r0, [pc, #40]	@ (8000f10 <main+0x358>)
 8000ee8:	f001 fbfa 	bl	80026e0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000eec:	200a      	movs	r0, #10
 8000eee:	f000 faff 	bl	80014f0 <HAL_Delay>
  {
 8000ef2:	e67a      	b.n	8000bea <main+0x32>
 8000ef4:	f3af 8000 	nop.w
 8000ef8:	66666666 	.word	0x66666666
 8000efc:	40006666 	.word	0x40006666
 8000f00:	200000f8 	.word	0x200000f8
 8000f04:	40498000 	.word	0x40498000
 8000f08:	40390000 	.word	0x40390000
 8000f0c:	66666667 	.word	0x66666667
 8000f10:	48000400 	.word	0x48000400

08000f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b090      	sub	sp, #64	@ 0x40
 8000f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1a:	f107 0318 	add.w	r3, r7, #24
 8000f1e:	2228      	movs	r2, #40	@ 0x28
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f003 f9cd 	bl	80042c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f36:	2302      	movs	r3, #2
 8000f38:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f3e:	2310      	movs	r3, #16
 8000f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f42:	2302      	movs	r3, #2
 8000f44:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f46:	2300      	movs	r3, #0
 8000f48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000f4a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f50:	f107 0318 	add.w	r3, r7, #24
 8000f54:	4618      	mov	r0, r3
 8000f56:	f001 fbf5 	bl	8002744 <HAL_RCC_OscConfig>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000f60:	f000 f8e8 	bl	8001134 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f64:	230f      	movs	r3, #15
 8000f66:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	2102      	movs	r1, #2
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f002 fbee 	bl	8003760 <HAL_RCC_ClockConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000f8a:	f000 f8d3 	bl	8001134 <Error_Handler>
  }
}
 8000f8e:	bf00      	nop
 8000f90:	3740      	adds	r7, #64	@ 0x40
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	@ 0x28
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000f9e:	4b26      	ldr	r3, [pc, #152]	@ (8001038 <MX_CAN_Init+0xa0>)
 8000fa0:	4a26      	ldr	r2, [pc, #152]	@ (800103c <MX_CAN_Init+0xa4>)
 8000fa2:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8000fa4:	4b24      	ldr	r3, [pc, #144]	@ (8001038 <MX_CAN_Init+0xa0>)
 8000fa6:	2208      	movs	r2, #8
 8000fa8:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000faa:	4b23      	ldr	r3, [pc, #140]	@ (8001038 <MX_CAN_Init+0xa0>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fb0:	4b21      	ldr	r3, [pc, #132]	@ (8001038 <MX_CAN_Init+0xa0>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000fb6:	4b20      	ldr	r3, [pc, #128]	@ (8001038 <MX_CAN_Init+0xa0>)
 8000fb8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000fbc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8001038 <MX_CAN_Init+0xa0>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000fc4:	4b1c      	ldr	r3, [pc, #112]	@ (8001038 <MX_CAN_Init+0xa0>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000fca:	4b1b      	ldr	r3, [pc, #108]	@ (8001038 <MX_CAN_Init+0xa0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000fd0:	4b19      	ldr	r3, [pc, #100]	@ (8001038 <MX_CAN_Init+0xa0>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000fd6:	4b18      	ldr	r3, [pc, #96]	@ (8001038 <MX_CAN_Init+0xa0>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000fdc:	4b16      	ldr	r3, [pc, #88]	@ (8001038 <MX_CAN_Init+0xa0>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000fe2:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <MX_CAN_Init+0xa0>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000fe8:	4813      	ldr	r0, [pc, #76]	@ (8001038 <MX_CAN_Init+0xa0>)
 8000fea:	f000 faa5 	bl	8001538 <HAL_CAN_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000ff4:	f000 f89e 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

   canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	623b      	str	r3, [r7, #32]
   canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 8000ffc:	230a      	movs	r3, #10
 8000ffe:	617b      	str	r3, [r7, #20]
   canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001000:	2300      	movs	r3, #0
 8001002:	613b      	str	r3, [r7, #16]
   canfilterconfig.FilterIdHigh = 0x73<<5;
 8001004:	f44f 6366 	mov.w	r3, #3680	@ 0xe60
 8001008:	603b      	str	r3, [r7, #0]
   canfilterconfig.FilterIdLow = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
   canfilterconfig.FilterMaskIdHigh = 0x73<<5;
 800100e:	f44f 6366 	mov.w	r3, #3680	@ 0xe60
 8001012:	60bb      	str	r3, [r7, #8]
   canfilterconfig.FilterMaskIdLow = 0x0000;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
   canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001018:	2300      	movs	r3, #0
 800101a:	61bb      	str	r3, [r7, #24]
   canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800101c:	2301      	movs	r3, #1
 800101e:	61fb      	str	r3, [r7, #28]
   canfilterconfig.SlaveStartFilterBank = 0;  // how many filters to assign to the CAN1 (master can)
 8001020:	2300      	movs	r3, #0
 8001022:	627b      	str	r3, [r7, #36]	@ 0x24

   HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8001024:	463b      	mov	r3, r7
 8001026:	4619      	mov	r1, r3
 8001028:	4803      	ldr	r0, [pc, #12]	@ (8001038 <MX_CAN_Init+0xa0>)
 800102a:	f000 fb80 	bl	800172e <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	3728      	adds	r7, #40	@ 0x28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000028 	.word	0x20000028
 800103c:	40006400 	.word	0x40006400

08001040 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001044:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 8001046:	4a15      	ldr	r2, [pc, #84]	@ (800109c <MX_USART2_UART_Init+0x5c>)
 8001048:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800104a:	4b13      	ldr	r3, [pc, #76]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 800104c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001050:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001052:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001058:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800105e:	4b0e      	ldr	r3, [pc, #56]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001064:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 8001066:	220c      	movs	r2, #12
 8001068:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106a:	4b0b      	ldr	r3, [pc, #44]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001070:	4b09      	ldr	r3, [pc, #36]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001076:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 8001078:	2200      	movs	r2, #0
 800107a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800107c:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 800107e:	2200      	movs	r2, #0
 8001080:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001082:	4805      	ldr	r0, [pc, #20]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 8001084:	f002 fd7e 	bl	8003b84 <HAL_UART_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800108e:	f000 f851 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000050 	.word	0x20000050
 800109c:	40004400 	.word	0x40004400

080010a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a6:	f107 030c 	add.w	r3, r7, #12
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
 80010b4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010b6:	4b1d      	ldr	r3, [pc, #116]	@ (800112c <MX_GPIO_Init+0x8c>)
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	4a1c      	ldr	r2, [pc, #112]	@ (800112c <MX_GPIO_Init+0x8c>)
 80010bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010c0:	6153      	str	r3, [r2, #20]
 80010c2:	4b1a      	ldr	r3, [pc, #104]	@ (800112c <MX_GPIO_Init+0x8c>)
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	4b17      	ldr	r3, [pc, #92]	@ (800112c <MX_GPIO_Init+0x8c>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	4a16      	ldr	r2, [pc, #88]	@ (800112c <MX_GPIO_Init+0x8c>)
 80010d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010d8:	6153      	str	r3, [r2, #20]
 80010da:	4b14      	ldr	r3, [pc, #80]	@ (800112c <MX_GPIO_Init+0x8c>)
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <MX_GPIO_Init+0x8c>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4a10      	ldr	r2, [pc, #64]	@ (800112c <MX_GPIO_Init+0x8c>)
 80010ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010f0:	6153      	str	r3, [r2, #20]
 80010f2:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <MX_GPIO_Init+0x8c>)
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	2108      	movs	r1, #8
 8001102:	480b      	ldr	r0, [pc, #44]	@ (8001130 <MX_GPIO_Init+0x90>)
 8001104:	f001 faec 	bl	80026e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001108:	2308      	movs	r3, #8
 800110a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110c:	2301      	movs	r3, #1
 800110e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	4619      	mov	r1, r3
 800111e:	4804      	ldr	r0, [pc, #16]	@ (8001130 <MX_GPIO_Init+0x90>)
 8001120:	f001 f96c 	bl	80023fc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001124:	bf00      	nop
 8001126:	3720      	adds	r7, #32
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40021000 	.word	0x40021000
 8001130:	48000400 	.word	0x48000400

08001134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001138:	b672      	cpsid	i
}
 800113a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <Error_Handler+0x8>

08001140 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001146:	4b0f      	ldr	r3, [pc, #60]	@ (8001184 <HAL_MspInit+0x44>)
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	4a0e      	ldr	r2, [pc, #56]	@ (8001184 <HAL_MspInit+0x44>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6193      	str	r3, [r2, #24]
 8001152:	4b0c      	ldr	r3, [pc, #48]	@ (8001184 <HAL_MspInit+0x44>)
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800115e:	4b09      	ldr	r3, [pc, #36]	@ (8001184 <HAL_MspInit+0x44>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	4a08      	ldr	r2, [pc, #32]	@ (8001184 <HAL_MspInit+0x44>)
 8001164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001168:	61d3      	str	r3, [r2, #28]
 800116a:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <HAL_MspInit+0x44>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40021000 	.word	0x40021000

08001188 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	@ 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a31      	ldr	r2, [pc, #196]	@ (800126c <HAL_CAN_MspInit+0xe4>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d15b      	bne.n	8001262 <HAL_CAN_MspInit+0xda>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80011aa:	4b31      	ldr	r3, [pc, #196]	@ (8001270 <HAL_CAN_MspInit+0xe8>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	4a30      	ldr	r2, [pc, #192]	@ (8001270 <HAL_CAN_MspInit+0xe8>)
 80011b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011b4:	61d3      	str	r3, [r2, #28]
 80011b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001270 <HAL_CAN_MspInit+0xe8>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001270 <HAL_CAN_MspInit+0xe8>)
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	4a2a      	ldr	r2, [pc, #168]	@ (8001270 <HAL_CAN_MspInit+0xe8>)
 80011c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011cc:	6153      	str	r3, [r2, #20]
 80011ce:	4b28      	ldr	r3, [pc, #160]	@ (8001270 <HAL_CAN_MspInit+0xe8>)
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80011da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011e8:	2303      	movs	r3, #3
 80011ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80011ec:	2309      	movs	r3, #9
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011fa:	f001 f8ff 	bl	80023fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800120c:	2303      	movs	r3, #3
 800120e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001210:	2309      	movs	r3, #9
 8001212:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4619      	mov	r1, r3
 800121a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800121e:	f001 f8ed 	bl	80023fc <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_TX_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	2013      	movs	r0, #19
 8001228:	f001 f8b1 	bl	800238e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_TX_IRQn);
 800122c:	2013      	movs	r0, #19
 800122e:	f001 f8ca 	bl	80023c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	2014      	movs	r0, #20
 8001238:	f001 f8a9 	bl	800238e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 800123c:	2014      	movs	r0, #20
 800123e:	f001 f8c2 	bl	80023c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	2015      	movs	r0, #21
 8001248:	f001 f8a1 	bl	800238e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 800124c:	2015      	movs	r0, #21
 800124e:	f001 f8ba 	bl	80023c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 0, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	2016      	movs	r0, #22
 8001258:	f001 f899 	bl	800238e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 800125c:	2016      	movs	r0, #22
 800125e:	f001 f8b2 	bl	80023c6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 8001262:	bf00      	nop
 8001264:	3728      	adds	r7, #40	@ 0x28
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40006400 	.word	0x40006400
 8001270:	40021000 	.word	0x40021000

08001274 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	@ 0x28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a18      	ldr	r2, [pc, #96]	@ (80012f4 <HAL_UART_MspInit+0x80>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d129      	bne.n	80012ea <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001296:	4b18      	ldr	r3, [pc, #96]	@ (80012f8 <HAL_UART_MspInit+0x84>)
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	4a17      	ldr	r2, [pc, #92]	@ (80012f8 <HAL_UART_MspInit+0x84>)
 800129c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012a0:	61d3      	str	r3, [r2, #28]
 80012a2:	4b15      	ldr	r3, [pc, #84]	@ (80012f8 <HAL_UART_MspInit+0x84>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	4b12      	ldr	r3, [pc, #72]	@ (80012f8 <HAL_UART_MspInit+0x84>)
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	4a11      	ldr	r2, [pc, #68]	@ (80012f8 <HAL_UART_MspInit+0x84>)
 80012b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012b8:	6153      	str	r3, [r2, #20]
 80012ba:	4b0f      	ldr	r3, [pc, #60]	@ (80012f8 <HAL_UART_MspInit+0x84>)
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80012c6:	f248 0304 	movw	r3, #32772	@ 0x8004
 80012ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d4:	2303      	movs	r3, #3
 80012d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012d8:	2307      	movs	r3, #7
 80012da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4619      	mov	r1, r3
 80012e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012e6:	f001 f889 	bl	80023fc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80012ea:	bf00      	nop
 80012ec:	3728      	adds	r7, #40	@ 0x28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40004400 	.word	0x40004400
 80012f8:	40021000 	.word	0x40021000

080012fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <NMI_Handler+0x4>

08001304 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <HardFault_Handler+0x4>

0800130c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001310:	bf00      	nop
 8001312:	e7fd      	b.n	8001310 <MemManage_Handler+0x4>

08001314 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <BusFault_Handler+0x4>

0800131c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <UsageFault_Handler+0x4>

08001324 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001352:	f000 f8ad 	bl	80014b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX interrupt.
  */
void CAN_TX_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_TX_IRQn 0 */

  /* USER CODE END CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001360:	4802      	ldr	r0, [pc, #8]	@ (800136c <CAN_TX_IRQHandler+0x10>)
 8001362:	f000 fd0a 	bl	8001d7a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_TX_IRQn 1 */

  /* USER CODE END CAN_TX_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000028 	.word	0x20000028

08001370 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001374:	4802      	ldr	r0, [pc, #8]	@ (8001380 <CAN_RX0_IRQHandler+0x10>)
 8001376:	f000 fd00 	bl	8001d7a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000028 	.word	0x20000028

08001384 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001388:	4802      	ldr	r0, [pc, #8]	@ (8001394 <CAN_RX1_IRQHandler+0x10>)
 800138a:	f000 fcf6 	bl	8001d7a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000028 	.word	0x20000028

08001398 <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_SCE_IRQn 0 */

  /* USER CODE END CAN_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800139c:	4802      	ldr	r0, [pc, #8]	@ (80013a8 <CAN_SCE_IRQHandler+0x10>)
 800139e:	f000 fcec 	bl	8001d7a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_SCE_IRQn 1 */

  /* USER CODE END CAN_SCE_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000028 	.word	0x20000028

080013ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b0:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <SystemInit+0x20>)
 80013b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013b6:	4a05      	ldr	r2, [pc, #20]	@ (80013cc <SystemInit+0x20>)
 80013b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001408 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80013d4:	f7ff ffea 	bl	80013ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d8:	480c      	ldr	r0, [pc, #48]	@ (800140c <LoopForever+0x6>)
  ldr r1, =_edata
 80013da:	490d      	ldr	r1, [pc, #52]	@ (8001410 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001414 <LoopForever+0xe>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e0:	e002      	b.n	80013e8 <LoopCopyDataInit>

080013e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e6:	3304      	adds	r3, #4

080013e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ec:	d3f9      	bcc.n	80013e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001418 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013f0:	4c0a      	ldr	r4, [pc, #40]	@ (800141c <LoopForever+0x16>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f4:	e001      	b.n	80013fa <LoopFillZerobss>

080013f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f8:	3204      	adds	r2, #4

080013fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013fc:	d3fb      	bcc.n	80013f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013fe:	f002 ff69 	bl	80042d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001402:	f7ff fbd9 	bl	8000bb8 <main>

08001406 <LoopForever>:

LoopForever:
    b LoopForever
 8001406:	e7fe      	b.n	8001406 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001408:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800140c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001410:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001414:	08004374 	.word	0x08004374
  ldr r2, =_sbss
 8001418:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800141c:	20000128 	.word	0x20000128

08001420 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001420:	e7fe      	b.n	8001420 <ADC1_2_IRQHandler>
	...

08001424 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001428:	4b08      	ldr	r3, [pc, #32]	@ (800144c <HAL_Init+0x28>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a07      	ldr	r2, [pc, #28]	@ (800144c <HAL_Init+0x28>)
 800142e:	f043 0310 	orr.w	r3, r3, #16
 8001432:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001434:	2003      	movs	r0, #3
 8001436:	f000 ff9f 	bl	8002378 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800143a:	2000      	movs	r0, #0
 800143c:	f000 f808 	bl	8001450 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001440:	f7ff fe7e 	bl	8001140 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40022000 	.word	0x40022000

08001450 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001458:	4b12      	ldr	r3, [pc, #72]	@ (80014a4 <HAL_InitTick+0x54>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b12      	ldr	r3, [pc, #72]	@ (80014a8 <HAL_InitTick+0x58>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	4619      	mov	r1, r3
 8001462:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001466:	fbb3 f3f1 	udiv	r3, r3, r1
 800146a:	fbb2 f3f3 	udiv	r3, r2, r3
 800146e:	4618      	mov	r0, r3
 8001470:	f000 ffb7 	bl	80023e2 <HAL_SYSTICK_Config>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e00e      	b.n	800149c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b0f      	cmp	r3, #15
 8001482:	d80a      	bhi.n	800149a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001484:	2200      	movs	r2, #0
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	f04f 30ff 	mov.w	r0, #4294967295
 800148c:	f000 ff7f 	bl	800238e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001490:	4a06      	ldr	r2, [pc, #24]	@ (80014ac <HAL_InitTick+0x5c>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	e000      	b.n	800149c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
}
 800149c:	4618      	mov	r0, r3
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000000 	.word	0x20000000
 80014a8:	20000008 	.word	0x20000008
 80014ac:	20000004 	.word	0x20000004

080014b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b4:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <HAL_IncTick+0x20>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <HAL_IncTick+0x24>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	4a04      	ldr	r2, [pc, #16]	@ (80014d4 <HAL_IncTick+0x24>)
 80014c2:	6013      	str	r3, [r2, #0]
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	20000008 	.word	0x20000008
 80014d4:	20000124 	.word	0x20000124

080014d8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
	{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return uwTick;  
 80014dc:	4b03      	ldr	r3, [pc, #12]	@ (80014ec <HAL_GetTick+0x14>)
 80014de:	681b      	ldr	r3, [r3, #0]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	20000124 	.word	0x20000124

080014f0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f8:	f7ff ffee 	bl	80014d8 <HAL_GetTick>
 80014fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001508:	d005      	beq.n	8001516 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800150a:	4b0a      	ldr	r3, [pc, #40]	@ (8001534 <HAL_Delay+0x44>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	461a      	mov	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4413      	add	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001516:	bf00      	nop
 8001518:	f7ff ffde 	bl	80014d8 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	429a      	cmp	r2, r3
 8001526:	d8f7      	bhi.n	8001518 <HAL_Delay+0x28>
  {
  }
}
 8001528:	bf00      	nop
 800152a:	bf00      	nop
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000008 	.word	0x20000008

08001538 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e0ed      	b.n	8001726 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d102      	bne.n	800155c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff fe16 	bl	8001188 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 0201 	orr.w	r2, r2, #1
 800156a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800156c:	f7ff ffb4 	bl	80014d8 <HAL_GetTick>
 8001570:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001572:	e012      	b.n	800159a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001574:	f7ff ffb0 	bl	80014d8 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b0a      	cmp	r3, #10
 8001580:	d90b      	bls.n	800159a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001586:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2205      	movs	r2, #5
 8001592:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e0c5      	b.n	8001726 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0e5      	beq.n	8001574 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0202 	bic.w	r2, r2, #2
 80015b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015b8:	f7ff ff8e 	bl	80014d8 <HAL_GetTick>
 80015bc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015be:	e012      	b.n	80015e6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015c0:	f7ff ff8a 	bl	80014d8 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b0a      	cmp	r3, #10
 80015cc:	d90b      	bls.n	80015e6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2205      	movs	r2, #5
 80015de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e09f      	b.n	8001726 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1e5      	bne.n	80015c0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	7e1b      	ldrb	r3, [r3, #24]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d108      	bne.n	800160e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	e007      	b.n	800161e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800161c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	7e5b      	ldrb	r3, [r3, #25]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d108      	bne.n	8001638 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	e007      	b.n	8001648 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001646:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	7e9b      	ldrb	r3, [r3, #26]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d108      	bne.n	8001662 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 0220 	orr.w	r2, r2, #32
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	e007      	b.n	8001672 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 0220 	bic.w	r2, r2, #32
 8001670:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	7edb      	ldrb	r3, [r3, #27]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d108      	bne.n	800168c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 0210 	bic.w	r2, r2, #16
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	e007      	b.n	800169c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f042 0210 	orr.w	r2, r2, #16
 800169a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	7f1b      	ldrb	r3, [r3, #28]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d108      	bne.n	80016b6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f042 0208 	orr.w	r2, r2, #8
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	e007      	b.n	80016c6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0208 	bic.w	r2, r2, #8
 80016c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	7f5b      	ldrb	r3, [r3, #29]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d108      	bne.n	80016e0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f042 0204 	orr.w	r2, r2, #4
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	e007      	b.n	80016f0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 0204 	bic.w	r2, r2, #4
 80016ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	431a      	orrs	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	ea42 0103 	orr.w	r1, r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	1e5a      	subs	r2, r3, #1
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800172e:	b480      	push	{r7}
 8001730:	b087      	sub	sp, #28
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001744:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001746:	7cfb      	ldrb	r3, [r7, #19]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d003      	beq.n	8001754 <HAL_CAN_ConfigFilter+0x26>
 800174c:	7cfb      	ldrb	r3, [r7, #19]
 800174e:	2b02      	cmp	r3, #2
 8001750:	f040 80aa 	bne.w	80018a8 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800175a:	f043 0201 	orr.w	r2, r3, #1
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	f003 031f 	and.w	r3, r3, #31
 800176c:	2201      	movs	r2, #1
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	43db      	mvns	r3, r3
 800177e:	401a      	ands	r2, r3
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d123      	bne.n	80017d6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	43db      	mvns	r3, r3
 8001798:	401a      	ands	r2, r3
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017b0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3248      	adds	r2, #72	@ 0x48
 80017b6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017ca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017cc:	6979      	ldr	r1, [r7, #20]
 80017ce:	3348      	adds	r3, #72	@ 0x48
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	440b      	add	r3, r1
 80017d4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d122      	bne.n	8001824 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	431a      	orrs	r2, r3
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80017fe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	3248      	adds	r2, #72	@ 0x48
 8001804:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001818:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800181a:	6979      	ldr	r1, [r7, #20]
 800181c:	3348      	adds	r3, #72	@ 0x48
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	440b      	add	r3, r1
 8001822:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d109      	bne.n	8001840 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	43db      	mvns	r3, r3
 8001836:	401a      	ands	r2, r3
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800183e:	e007      	b.n	8001850 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	431a      	orrs	r2, r3
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d109      	bne.n	800186c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	43db      	mvns	r3, r3
 8001862:	401a      	ands	r2, r3
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800186a:	e007      	b.n	800187c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	431a      	orrs	r2, r3
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d107      	bne.n	8001894 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	431a      	orrs	r2, r3
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800189a:	f023 0201 	bic.w	r2, r3, #1
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	e006      	b.n	80018b6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ac:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
  }
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	371c      	adds	r7, #28
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b084      	sub	sp, #16
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d12e      	bne.n	8001934 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2202      	movs	r2, #2
 80018da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 0201 	bic.w	r2, r2, #1
 80018ec:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80018ee:	f7ff fdf3 	bl	80014d8 <HAL_GetTick>
 80018f2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80018f4:	e012      	b.n	800191c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018f6:	f7ff fdef 	bl	80014d8 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b0a      	cmp	r3, #10
 8001902:	d90b      	bls.n	800191c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001908:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2205      	movs	r2, #5
 8001914:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e012      	b.n	8001942 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1e5      	bne.n	80018f6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001930:	2300      	movs	r3, #0
 8001932:	e006      	b.n	8001942 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001938:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
  }
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800194a:	b480      	push	{r7}
 800194c:	b089      	sub	sp, #36	@ 0x24
 800194e:	af00      	add	r7, sp, #0
 8001950:	60f8      	str	r0, [r7, #12]
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
 8001956:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800195e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001968:	7ffb      	ldrb	r3, [r7, #31]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d003      	beq.n	8001976 <HAL_CAN_AddTxMessage+0x2c>
 800196e:	7ffb      	ldrb	r3, [r7, #31]
 8001970:	2b02      	cmp	r3, #2
 8001972:	f040 80ad 	bne.w	8001ad0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d10a      	bne.n	8001996 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001986:	2b00      	cmp	r3, #0
 8001988:	d105      	bne.n	8001996 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 8095 	beq.w	8001ac0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	0e1b      	lsrs	r3, r3, #24
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80019a0:	2201      	movs	r2, #1
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	409a      	lsls	r2, r3
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10d      	bne.n	80019ce <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80019bc:	68f9      	ldr	r1, [r7, #12]
 80019be:	6809      	ldr	r1, [r1, #0]
 80019c0:	431a      	orrs	r2, r3
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	3318      	adds	r3, #24
 80019c6:	011b      	lsls	r3, r3, #4
 80019c8:	440b      	add	r3, r1
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	e00f      	b.n	80019ee <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019d8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019de:	68f9      	ldr	r1, [r7, #12]
 80019e0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80019e2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	3318      	adds	r3, #24
 80019e8:	011b      	lsls	r3, r3, #4
 80019ea:	440b      	add	r3, r1
 80019ec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6819      	ldr	r1, [r3, #0]
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	691a      	ldr	r2, [r3, #16]
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	3318      	adds	r3, #24
 80019fa:	011b      	lsls	r3, r3, #4
 80019fc:	440b      	add	r3, r1
 80019fe:	3304      	adds	r3, #4
 8001a00:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	7d1b      	ldrb	r3, [r3, #20]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d111      	bne.n	8001a2e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	3318      	adds	r3, #24
 8001a12:	011b      	lsls	r3, r3, #4
 8001a14:	4413      	add	r3, r2
 8001a16:	3304      	adds	r3, #4
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	6811      	ldr	r1, [r2, #0]
 8001a1e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	3318      	adds	r3, #24
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	440b      	add	r3, r1
 8001a2a:	3304      	adds	r3, #4
 8001a2c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3307      	adds	r3, #7
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	061a      	lsls	r2, r3, #24
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3306      	adds	r3, #6
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	041b      	lsls	r3, r3, #16
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3305      	adds	r3, #5
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	021b      	lsls	r3, r3, #8
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	3204      	adds	r2, #4
 8001a4e:	7812      	ldrb	r2, [r2, #0]
 8001a50:	4610      	mov	r0, r2
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	6811      	ldr	r1, [r2, #0]
 8001a56:	ea43 0200 	orr.w	r2, r3, r0
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	011b      	lsls	r3, r3, #4
 8001a5e:	440b      	add	r3, r1
 8001a60:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001a64:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	3303      	adds	r3, #3
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	061a      	lsls	r2, r3, #24
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3302      	adds	r3, #2
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	041b      	lsls	r3, r3, #16
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	021b      	lsls	r3, r3, #8
 8001a80:	4313      	orrs	r3, r2
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	7812      	ldrb	r2, [r2, #0]
 8001a86:	4610      	mov	r0, r2
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	6811      	ldr	r1, [r2, #0]
 8001a8c:	ea43 0200 	orr.w	r2, r3, r0
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	011b      	lsls	r3, r3, #4
 8001a94:	440b      	add	r3, r1
 8001a96:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001a9a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	3318      	adds	r3, #24
 8001aa4:	011b      	lsls	r3, r3, #4
 8001aa6:	4413      	add	r3, r2
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	6811      	ldr	r1, [r2, #0]
 8001aae:	f043 0201 	orr.w	r2, r3, #1
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	3318      	adds	r3, #24
 8001ab6:	011b      	lsls	r3, r3, #4
 8001ab8:	440b      	add	r3, r1
 8001aba:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	e00e      	b.n	8001ade <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e006      	b.n	8001ade <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
  }
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3724      	adds	r7, #36	@ 0x24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001aea:	b480      	push	{r7}
 8001aec:	b087      	sub	sp, #28
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
 8001af6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001afe:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b00:	7dfb      	ldrb	r3, [r7, #23]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d003      	beq.n	8001b0e <HAL_CAN_GetRxMessage+0x24>
 8001b06:	7dfb      	ldrb	r3, [r7, #23]
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	f040 8103 	bne.w	8001d14 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d10e      	bne.n	8001b32 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d116      	bne.n	8001b50 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b26:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e0f7      	b.n	8001d22 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d107      	bne.n	8001b50 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b44:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0e8      	b.n	8001d22 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	331b      	adds	r3, #27
 8001b58:	011b      	lsls	r3, r3, #4
 8001b5a:	4413      	add	r3, r2
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0204 	and.w	r2, r3, #4
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10c      	bne.n	8001b88 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	331b      	adds	r3, #27
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	4413      	add	r3, r2
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	0d5b      	lsrs	r3, r3, #21
 8001b7e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	e00b      	b.n	8001ba0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	331b      	adds	r3, #27
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	4413      	add	r3, r2
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	08db      	lsrs	r3, r3, #3
 8001b98:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	331b      	adds	r3, #27
 8001ba8:	011b      	lsls	r3, r3, #4
 8001baa:	4413      	add	r3, r2
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0202 	and.w	r2, r3, #2
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	331b      	adds	r3, #27
 8001bbe:	011b      	lsls	r3, r3, #4
 8001bc0:	4413      	add	r3, r2
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2208      	movs	r2, #8
 8001bd2:	611a      	str	r2, [r3, #16]
 8001bd4:	e00b      	b.n	8001bee <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	331b      	adds	r3, #27
 8001bde:	011b      	lsls	r3, r3, #4
 8001be0:	4413      	add	r3, r2
 8001be2:	3304      	adds	r3, #4
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 020f 	and.w	r2, r3, #15
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	331b      	adds	r3, #27
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	0a1b      	lsrs	r3, r3, #8
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	331b      	adds	r3, #27
 8001c0e:	011b      	lsls	r3, r3, #4
 8001c10:	4413      	add	r3, r2
 8001c12:	3304      	adds	r3, #4
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	0c1b      	lsrs	r3, r3, #16
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	011b      	lsls	r3, r3, #4
 8001c26:	4413      	add	r3, r2
 8001c28:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	4413      	add	r3, r2
 8001c3e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	0a1a      	lsrs	r2, r3, #8
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	011b      	lsls	r3, r3, #4
 8001c56:	4413      	add	r3, r2
 8001c58:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	0c1a      	lsrs	r2, r3, #16
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	3302      	adds	r3, #2
 8001c64:	b2d2      	uxtb	r2, r2
 8001c66:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	011b      	lsls	r3, r3, #4
 8001c70:	4413      	add	r3, r2
 8001c72:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	0e1a      	lsrs	r2, r3, #24
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	3303      	adds	r3, #3
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	011b      	lsls	r3, r3, #4
 8001c8a:	4413      	add	r3, r2
 8001c8c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	3304      	adds	r3, #4
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	0a1a      	lsrs	r2, r3, #8
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	3305      	adds	r3, #5
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	011b      	lsls	r3, r3, #4
 8001cbc:	4413      	add	r3, r2
 8001cbe:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	0c1a      	lsrs	r2, r3, #16
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	3306      	adds	r3, #6
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	011b      	lsls	r3, r3, #4
 8001cd6:	4413      	add	r3, r2
 8001cd8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	0e1a      	lsrs	r2, r3, #24
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	3307      	adds	r3, #7
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d108      	bne.n	8001d00 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68da      	ldr	r2, [r3, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f042 0220 	orr.w	r2, r2, #32
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	e007      	b.n	8001d10 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	691a      	ldr	r2, [r3, #16]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f042 0220 	orr.w	r2, r2, #32
 8001d0e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001d10:	2300      	movs	r3, #0
 8001d12:	e006      	b.n	8001d22 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d18:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
  }
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	371c      	adds	r7, #28
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b085      	sub	sp, #20
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d3e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d002      	beq.n	8001d4c <HAL_CAN_ActivateNotification+0x1e>
 8001d46:	7bfb      	ldrb	r3, [r7, #15]
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d109      	bne.n	8001d60 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6959      	ldr	r1, [r3, #20]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	e006      	b.n	8001d6e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d64:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
  }
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b08a      	sub	sp, #40	@ 0x28
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001d82:	2300      	movs	r3, #0
 8001d84:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001db6:	6a3b      	ldr	r3, [r7, #32]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d07c      	beq.n	8001eba <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d023      	beq.n	8001e12 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f983 	bl	80020e8 <HAL_CAN_TxMailbox0CompleteCallback>
 8001de2:	e016      	b.n	8001e12 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	f003 0304 	and.w	r3, r3, #4
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d004      	beq.n	8001df8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001df4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001df6:	e00c      	b.n	8001e12 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d004      	beq.n	8001e0c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e08:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e0a:	e002      	b.n	8001e12 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f989 	bl	8002124 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d024      	beq.n	8001e66 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e24:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f963 	bl	80020fc <HAL_CAN_TxMailbox1CompleteCallback>
 8001e36:	e016      	b.n	8001e66 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d004      	beq.n	8001e4c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e44:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e48:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e4a:	e00c      	b.n	8001e66 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d004      	beq.n	8001e60 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e5e:	e002      	b.n	8001e66 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f969 	bl	8002138 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d024      	beq.n	8001eba <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001e78:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f943 	bl	8002110 <HAL_CAN_TxMailbox2CompleteCallback>
 8001e8a:	e016      	b.n	8001eba <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d004      	beq.n	8001ea0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e9e:	e00c      	b.n	8001eba <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d004      	beq.n	8001eb4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eb2:	e002      	b.n	8001eba <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f949 	bl	800214c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001eba:	6a3b      	ldr	r3, [r7, #32]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00c      	beq.n	8001ede <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f003 0310 	and.w	r3, r3, #16
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d007      	beq.n	8001ede <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ed4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2210      	movs	r2, #16
 8001edc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00b      	beq.n	8001f00 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d006      	beq.n	8001f00 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2208      	movs	r2, #8
 8001ef8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f930 	bl	8002160 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001f00:	6a3b      	ldr	r3, [r7, #32]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d009      	beq.n	8001f1e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d002      	beq.n	8001f1e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7fe fd23 	bl	8000964 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
 8001f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00c      	beq.n	8001f42 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	f003 0310 	and.w	r3, r3, #16
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d007      	beq.n	8001f42 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f34:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f38:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2210      	movs	r2, #16
 8001f40:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001f42:	6a3b      	ldr	r3, [r7, #32]
 8001f44:	f003 0320 	and.w	r3, r3, #32
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00b      	beq.n	8001f64 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d006      	beq.n	8001f64 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2208      	movs	r2, #8
 8001f5c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f912 	bl	8002188 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	f003 0310 	and.w	r3, r3, #16
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d009      	beq.n	8001f82 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d002      	beq.n	8001f82 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f8f9 	bl	8002174 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00b      	beq.n	8001fa4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f003 0310 	and.w	r3, r3, #16
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d006      	beq.n	8001fa4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2210      	movs	r2, #16
 8001f9c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f8fc 	bl	800219c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00b      	beq.n	8001fc6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d006      	beq.n	8001fc6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2208      	movs	r2, #8
 8001fbe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f8f5 	bl	80021b0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d07b      	beq.n	80020c8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d072      	beq.n	80020c0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001fda:	6a3b      	ldr	r3, [r7, #32]
 8001fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d008      	beq.n	8001ff6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ff6:	6a3b      	ldr	r3, [r7, #32]
 8001ff8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d008      	beq.n	8002012 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800200a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200c:	f043 0302 	orr.w	r3, r3, #2
 8002010:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002012:	6a3b      	ldr	r3, [r7, #32]
 8002014:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002018:	2b00      	cmp	r3, #0
 800201a:	d008      	beq.n	800202e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002028:	f043 0304 	orr.w	r3, r3, #4
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800202e:	6a3b      	ldr	r3, [r7, #32]
 8002030:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002034:	2b00      	cmp	r3, #0
 8002036:	d043      	beq.n	80020c0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800203e:	2b00      	cmp	r3, #0
 8002040:	d03e      	beq.n	80020c0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002048:	2b60      	cmp	r3, #96	@ 0x60
 800204a:	d02b      	beq.n	80020a4 <HAL_CAN_IRQHandler+0x32a>
 800204c:	2b60      	cmp	r3, #96	@ 0x60
 800204e:	d82e      	bhi.n	80020ae <HAL_CAN_IRQHandler+0x334>
 8002050:	2b50      	cmp	r3, #80	@ 0x50
 8002052:	d022      	beq.n	800209a <HAL_CAN_IRQHandler+0x320>
 8002054:	2b50      	cmp	r3, #80	@ 0x50
 8002056:	d82a      	bhi.n	80020ae <HAL_CAN_IRQHandler+0x334>
 8002058:	2b40      	cmp	r3, #64	@ 0x40
 800205a:	d019      	beq.n	8002090 <HAL_CAN_IRQHandler+0x316>
 800205c:	2b40      	cmp	r3, #64	@ 0x40
 800205e:	d826      	bhi.n	80020ae <HAL_CAN_IRQHandler+0x334>
 8002060:	2b30      	cmp	r3, #48	@ 0x30
 8002062:	d010      	beq.n	8002086 <HAL_CAN_IRQHandler+0x30c>
 8002064:	2b30      	cmp	r3, #48	@ 0x30
 8002066:	d822      	bhi.n	80020ae <HAL_CAN_IRQHandler+0x334>
 8002068:	2b10      	cmp	r3, #16
 800206a:	d002      	beq.n	8002072 <HAL_CAN_IRQHandler+0x2f8>
 800206c:	2b20      	cmp	r3, #32
 800206e:	d005      	beq.n	800207c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002070:	e01d      	b.n	80020ae <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002074:	f043 0308 	orr.w	r3, r3, #8
 8002078:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800207a:	e019      	b.n	80020b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800207c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207e:	f043 0310 	orr.w	r3, r3, #16
 8002082:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002084:	e014      	b.n	80020b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002088:	f043 0320 	orr.w	r3, r3, #32
 800208c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800208e:	e00f      	b.n	80020b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002092:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002096:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002098:	e00a      	b.n	80020b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800209a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020a0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80020a2:	e005      	b.n	80020b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80020a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020aa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80020ac:	e000      	b.n	80020b0 <HAL_CAN_IRQHandler+0x336>
            break;
 80020ae:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	699a      	ldr	r2, [r3, #24]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80020be:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2204      	movs	r2, #4
 80020c6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80020c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d008      	beq.n	80020e0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d4:	431a      	orrs	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f872 	bl	80021c4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80020e0:	bf00      	nop
 80020e2:	3728      	adds	r7, #40	@ 0x28
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e8:	4b0c      	ldr	r3, [pc, #48]	@ (800221c <__NVIC_SetPriorityGrouping+0x44>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021f4:	4013      	ands	r3, r2
 80021f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002200:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002204:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800220a:	4a04      	ldr	r2, [pc, #16]	@ (800221c <__NVIC_SetPriorityGrouping+0x44>)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	60d3      	str	r3, [r2, #12]
}
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002224:	4b04      	ldr	r3, [pc, #16]	@ (8002238 <__NVIC_GetPriorityGrouping+0x18>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	0a1b      	lsrs	r3, r3, #8
 800222a:	f003 0307 	and.w	r3, r3, #7
}
 800222e:	4618      	mov	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224a:	2b00      	cmp	r3, #0
 800224c:	db0b      	blt.n	8002266 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	f003 021f 	and.w	r2, r3, #31
 8002254:	4907      	ldr	r1, [pc, #28]	@ (8002274 <__NVIC_EnableIRQ+0x38>)
 8002256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225a:	095b      	lsrs	r3, r3, #5
 800225c:	2001      	movs	r0, #1
 800225e:	fa00 f202 	lsl.w	r2, r0, r2
 8002262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	e000e100 	.word	0xe000e100

08002278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	6039      	str	r1, [r7, #0]
 8002282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002288:	2b00      	cmp	r3, #0
 800228a:	db0a      	blt.n	80022a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	b2da      	uxtb	r2, r3
 8002290:	490c      	ldr	r1, [pc, #48]	@ (80022c4 <__NVIC_SetPriority+0x4c>)
 8002292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002296:	0112      	lsls	r2, r2, #4
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	440b      	add	r3, r1
 800229c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022a0:	e00a      	b.n	80022b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4908      	ldr	r1, [pc, #32]	@ (80022c8 <__NVIC_SetPriority+0x50>)
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	3b04      	subs	r3, #4
 80022b0:	0112      	lsls	r2, r2, #4
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	440b      	add	r3, r1
 80022b6:	761a      	strb	r2, [r3, #24]
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	e000e100 	.word	0xe000e100
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b089      	sub	sp, #36	@ 0x24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f1c3 0307 	rsb	r3, r3, #7
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	bf28      	it	cs
 80022ea:	2304      	movcs	r3, #4
 80022ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3304      	adds	r3, #4
 80022f2:	2b06      	cmp	r3, #6
 80022f4:	d902      	bls.n	80022fc <NVIC_EncodePriority+0x30>
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3b03      	subs	r3, #3
 80022fa:	e000      	b.n	80022fe <NVIC_EncodePriority+0x32>
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002300:	f04f 32ff 	mov.w	r2, #4294967295
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43da      	mvns	r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	401a      	ands	r2, r3
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002314:	f04f 31ff 	mov.w	r1, #4294967295
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	fa01 f303 	lsl.w	r3, r1, r3
 800231e:	43d9      	mvns	r1, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002324:	4313      	orrs	r3, r2
         );
}
 8002326:	4618      	mov	r0, r3
 8002328:	3724      	adds	r7, #36	@ 0x24
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
	...

08002334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3b01      	subs	r3, #1
 8002340:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002344:	d301      	bcc.n	800234a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002346:	2301      	movs	r3, #1
 8002348:	e00f      	b.n	800236a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800234a:	4a0a      	ldr	r2, [pc, #40]	@ (8002374 <SysTick_Config+0x40>)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3b01      	subs	r3, #1
 8002350:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002352:	210f      	movs	r1, #15
 8002354:	f04f 30ff 	mov.w	r0, #4294967295
 8002358:	f7ff ff8e 	bl	8002278 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800235c:	4b05      	ldr	r3, [pc, #20]	@ (8002374 <SysTick_Config+0x40>)
 800235e:	2200      	movs	r2, #0
 8002360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002362:	4b04      	ldr	r3, [pc, #16]	@ (8002374 <SysTick_Config+0x40>)
 8002364:	2207      	movs	r2, #7
 8002366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	e000e010 	.word	0xe000e010

08002378 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7ff ff29 	bl	80021d8 <__NVIC_SetPriorityGrouping>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b086      	sub	sp, #24
 8002392:	af00      	add	r7, sp, #0
 8002394:	4603      	mov	r3, r0
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	607a      	str	r2, [r7, #4]
 800239a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023a0:	f7ff ff3e 	bl	8002220 <__NVIC_GetPriorityGrouping>
 80023a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	68b9      	ldr	r1, [r7, #8]
 80023aa:	6978      	ldr	r0, [r7, #20]
 80023ac:	f7ff ff8e 	bl	80022cc <NVIC_EncodePriority>
 80023b0:	4602      	mov	r2, r0
 80023b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b6:	4611      	mov	r1, r2
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff ff5d 	bl	8002278 <__NVIC_SetPriority>
}
 80023be:	bf00      	nop
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b082      	sub	sp, #8
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	4603      	mov	r3, r0
 80023ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff ff31 	bl	800223c <__NVIC_EnableIRQ>
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff ffa2 	bl	8002334 <SysTick_Config>
 80023f0:	4603      	mov	r3, r0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800240a:	e14e      	b.n	80026aa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	2101      	movs	r1, #1
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	fa01 f303 	lsl.w	r3, r1, r3
 8002418:	4013      	ands	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 8140 	beq.w	80026a4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	2b01      	cmp	r3, #1
 800242e:	d005      	beq.n	800243c <HAL_GPIO_Init+0x40>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d130      	bne.n	800249e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	2203      	movs	r2, #3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4013      	ands	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	68da      	ldr	r2, [r3, #12]
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4313      	orrs	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002472:	2201      	movs	r2, #1
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	4013      	ands	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	091b      	lsrs	r3, r3, #4
 8002488:	f003 0201 	and.w	r2, r3, #1
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d017      	beq.n	80024da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	2203      	movs	r2, #3
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43db      	mvns	r3, r3
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	4013      	ands	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d123      	bne.n	800252e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	08da      	lsrs	r2, r3, #3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3208      	adds	r2, #8
 80024ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	220f      	movs	r2, #15
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4013      	ands	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	691a      	ldr	r2, [r3, #16]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	08da      	lsrs	r2, r3, #3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3208      	adds	r2, #8
 8002528:	6939      	ldr	r1, [r7, #16]
 800252a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	2203      	movs	r2, #3
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4013      	ands	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 0203 	and.w	r2, r3, #3
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 809a 	beq.w	80026a4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002570:	4b55      	ldr	r3, [pc, #340]	@ (80026c8 <HAL_GPIO_Init+0x2cc>)
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	4a54      	ldr	r2, [pc, #336]	@ (80026c8 <HAL_GPIO_Init+0x2cc>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	6193      	str	r3, [r2, #24]
 800257c:	4b52      	ldr	r3, [pc, #328]	@ (80026c8 <HAL_GPIO_Init+0x2cc>)
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002588:	4a50      	ldr	r2, [pc, #320]	@ (80026cc <HAL_GPIO_Init+0x2d0>)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	089b      	lsrs	r3, r3, #2
 800258e:	3302      	adds	r3, #2
 8002590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002594:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	220f      	movs	r2, #15
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4013      	ands	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80025b2:	d013      	beq.n	80025dc <HAL_GPIO_Init+0x1e0>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a46      	ldr	r2, [pc, #280]	@ (80026d0 <HAL_GPIO_Init+0x2d4>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d00d      	beq.n	80025d8 <HAL_GPIO_Init+0x1dc>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a45      	ldr	r2, [pc, #276]	@ (80026d4 <HAL_GPIO_Init+0x2d8>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d007      	beq.n	80025d4 <HAL_GPIO_Init+0x1d8>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a44      	ldr	r2, [pc, #272]	@ (80026d8 <HAL_GPIO_Init+0x2dc>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d101      	bne.n	80025d0 <HAL_GPIO_Init+0x1d4>
 80025cc:	2303      	movs	r3, #3
 80025ce:	e006      	b.n	80025de <HAL_GPIO_Init+0x1e2>
 80025d0:	2305      	movs	r3, #5
 80025d2:	e004      	b.n	80025de <HAL_GPIO_Init+0x1e2>
 80025d4:	2302      	movs	r3, #2
 80025d6:	e002      	b.n	80025de <HAL_GPIO_Init+0x1e2>
 80025d8:	2301      	movs	r3, #1
 80025da:	e000      	b.n	80025de <HAL_GPIO_Init+0x1e2>
 80025dc:	2300      	movs	r3, #0
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	f002 0203 	and.w	r2, r2, #3
 80025e4:	0092      	lsls	r2, r2, #2
 80025e6:	4093      	lsls	r3, r2
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025ee:	4937      	ldr	r1, [pc, #220]	@ (80026cc <HAL_GPIO_Init+0x2d0>)
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	089b      	lsrs	r3, r3, #2
 80025f4:	3302      	adds	r3, #2
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025fc:	4b37      	ldr	r3, [pc, #220]	@ (80026dc <HAL_GPIO_Init+0x2e0>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	43db      	mvns	r3, r3
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	4013      	ands	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4313      	orrs	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002620:	4a2e      	ldr	r2, [pc, #184]	@ (80026dc <HAL_GPIO_Init+0x2e0>)
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002626:	4b2d      	ldr	r3, [pc, #180]	@ (80026dc <HAL_GPIO_Init+0x2e0>)
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	43db      	mvns	r3, r3
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4013      	ands	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4313      	orrs	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800264a:	4a24      	ldr	r2, [pc, #144]	@ (80026dc <HAL_GPIO_Init+0x2e0>)
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002650:	4b22      	ldr	r3, [pc, #136]	@ (80026dc <HAL_GPIO_Init+0x2e0>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	43db      	mvns	r3, r3
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	4013      	ands	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	4313      	orrs	r3, r2
 8002672:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002674:	4a19      	ldr	r2, [pc, #100]	@ (80026dc <HAL_GPIO_Init+0x2e0>)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800267a:	4b18      	ldr	r3, [pc, #96]	@ (80026dc <HAL_GPIO_Init+0x2e0>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	43db      	mvns	r3, r3
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4013      	ands	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4313      	orrs	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800269e:	4a0f      	ldr	r2, [pc, #60]	@ (80026dc <HAL_GPIO_Init+0x2e0>)
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	3301      	adds	r3, #1
 80026a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	fa22 f303 	lsr.w	r3, r2, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f47f aea9 	bne.w	800240c <HAL_GPIO_Init+0x10>
  }
}
 80026ba:	bf00      	nop
 80026bc:	bf00      	nop
 80026be:	371c      	adds	r7, #28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40010000 	.word	0x40010000
 80026d0:	48000400 	.word	0x48000400
 80026d4:	48000800 	.word	0x48000800
 80026d8:	48000c00 	.word	0x48000c00
 80026dc:	40010400 	.word	0x40010400

080026e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	807b      	strh	r3, [r7, #2]
 80026ec:	4613      	mov	r3, r2
 80026ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026f0:	787b      	ldrb	r3, [r7, #1]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026f6:	887a      	ldrh	r2, [r7, #2]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026fc:	e002      	b.n	8002704 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026fe:	887a      	ldrh	r2, [r7, #2]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002722:	887a      	ldrh	r2, [r7, #2]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4013      	ands	r3, r2
 8002728:	041a      	lsls	r2, r3, #16
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	43d9      	mvns	r1, r3
 800272e:	887b      	ldrh	r3, [r7, #2]
 8002730:	400b      	ands	r3, r1
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	619a      	str	r2, [r3, #24]
}
 8002738:	bf00      	nop
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800274a:	af00      	add	r7, sp, #0
 800274c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002750:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002754:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002756:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800275a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d102      	bne.n	800276a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	f000 bff4 	b.w	8003752 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800276a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800276e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 816d 	beq.w	8002a5a <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002780:	4bb4      	ldr	r3, [pc, #720]	@ (8002a54 <HAL_RCC_OscConfig+0x310>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 030c 	and.w	r3, r3, #12
 8002788:	2b04      	cmp	r3, #4
 800278a:	d00c      	beq.n	80027a6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800278c:	4bb1      	ldr	r3, [pc, #708]	@ (8002a54 <HAL_RCC_OscConfig+0x310>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 030c 	and.w	r3, r3, #12
 8002794:	2b08      	cmp	r3, #8
 8002796:	d157      	bne.n	8002848 <HAL_RCC_OscConfig+0x104>
 8002798:	4bae      	ldr	r3, [pc, #696]	@ (8002a54 <HAL_RCC_OscConfig+0x310>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027a4:	d150      	bne.n	8002848 <HAL_RCC_OscConfig+0x104>
 80027a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027aa:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80027b2:	fa93 f3a3 	rbit	r3, r3
 80027b6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027ba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027be:	fab3 f383 	clz	r3, r3
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80027c6:	d802      	bhi.n	80027ce <HAL_RCC_OscConfig+0x8a>
 80027c8:	4ba2      	ldr	r3, [pc, #648]	@ (8002a54 <HAL_RCC_OscConfig+0x310>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	e015      	b.n	80027fa <HAL_RCC_OscConfig+0xb6>
 80027ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027d2:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80027da:	fa93 f3a3 	rbit	r3, r3
 80027de:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80027e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027e6:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80027ea:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80027ee:	fa93 f3a3 	rbit	r3, r3
 80027f2:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80027f6:	4b97      	ldr	r3, [pc, #604]	@ (8002a54 <HAL_RCC_OscConfig+0x310>)
 80027f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80027fe:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002802:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002806:	fa92 f2a2 	rbit	r2, r2
 800280a:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800280e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002812:	fab2 f282 	clz	r2, r2
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	f042 0220 	orr.w	r2, r2, #32
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	f002 021f 	and.w	r2, r2, #31
 8002822:	2101      	movs	r1, #1
 8002824:	fa01 f202 	lsl.w	r2, r1, r2
 8002828:	4013      	ands	r3, r2
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 8114 	beq.w	8002a58 <HAL_RCC_OscConfig+0x314>
 8002830:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002834:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	f040 810b 	bne.w	8002a58 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	f000 bf85 	b.w	8003752 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002848:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800284c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002858:	d106      	bne.n	8002868 <HAL_RCC_OscConfig+0x124>
 800285a:	4b7e      	ldr	r3, [pc, #504]	@ (8002a54 <HAL_RCC_OscConfig+0x310>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a7d      	ldr	r2, [pc, #500]	@ (8002a54 <HAL_RCC_OscConfig+0x310>)
 8002860:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	e036      	b.n	80028d6 <HAL_RCC_OscConfig+0x192>
 8002868:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800286c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10c      	bne.n	8002892 <HAL_RCC_OscConfig+0x14e>
 8002878:	4b76      	ldr	r3, [pc, #472]	@ (8002a54 <HAL_RCC_OscConfig+0x310>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a75      	ldr	r2, [pc, #468]	@ (8002a54 <HAL_RCC_OscConfig+0x310>)
 800287e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	4b73      	ldr	r3, [pc, #460]	@ (8002a54 <HAL_RCC_OscConfig+0x310>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a72      	ldr	r2, [pc, #456]	@ (8002a54 <HAL_RCC_OscConfig+0x310>)
 800288a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	e021      	b.n	80028d6 <HAL_RCC_OscConfig+0x192>
 8002892:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002896:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028a2:	d10c      	bne.n	80028be <HAL_RCC_OscConfig+0x17a>
 80028a4:	4b6b      	ldr	r3, [pc, #428]	@ (8002a54 <HAL_RCC_OscConfig+0x310>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a6a      	ldr	r2, [pc, #424]	@ (8002a54 <HAL_RCC_OscConfig+0x310>)
 80028aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	4b68      	ldr	r3, [pc, #416]	@ (8002a54 <HAL_RCC_OscConfig+0x310>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a67      	ldr	r2, [pc, #412]	@ (8002a54 <HAL_RCC_OscConfig+0x310>)
 80028b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028ba:	6013      	str	r3, [r2, #0]
 80028bc:	e00b      	b.n	80028d6 <HAL_RCC_OscConfig+0x192>
 80028be:	4b65      	ldr	r3, [pc, #404]	@ (8002a54 <HAL_RCC_OscConfig+0x310>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a64      	ldr	r2, [pc, #400]	@ (8002a54 <HAL_RCC_OscConfig+0x310>)
 80028c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	4b62      	ldr	r3, [pc, #392]	@ (8002a54 <HAL_RCC_OscConfig+0x310>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a61      	ldr	r2, [pc, #388]	@ (8002a54 <HAL_RCC_OscConfig+0x310>)
 80028d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028d4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028d6:	4b5f      	ldr	r3, [pc, #380]	@ (8002a54 <HAL_RCC_OscConfig+0x310>)
 80028d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028da:	f023 020f 	bic.w	r2, r3, #15
 80028de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	495a      	ldr	r1, [pc, #360]	@ (8002a54 <HAL_RCC_OscConfig+0x310>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d054      	beq.n	80029aa <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002900:	f7fe fdea 	bl	80014d8 <HAL_GetTick>
 8002904:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002908:	e00a      	b.n	8002920 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800290a:	f7fe fde5 	bl	80014d8 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b64      	cmp	r3, #100	@ 0x64
 8002918:	d902      	bls.n	8002920 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	f000 bf19 	b.w	8003752 <HAL_RCC_OscConfig+0x100e>
 8002920:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002924:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002928:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800292c:	fa93 f3a3 	rbit	r3, r3
 8002930:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002934:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002938:	fab3 f383 	clz	r3, r3
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002940:	d802      	bhi.n	8002948 <HAL_RCC_OscConfig+0x204>
 8002942:	4b44      	ldr	r3, [pc, #272]	@ (8002a54 <HAL_RCC_OscConfig+0x310>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	e015      	b.n	8002974 <HAL_RCC_OscConfig+0x230>
 8002948:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800294c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002954:	fa93 f3a3 	rbit	r3, r3
 8002958:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800295c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002960:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002964:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002968:	fa93 f3a3 	rbit	r3, r3
 800296c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002970:	4b38      	ldr	r3, [pc, #224]	@ (8002a54 <HAL_RCC_OscConfig+0x310>)
 8002972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002974:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002978:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800297c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002980:	fa92 f2a2 	rbit	r2, r2
 8002984:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002988:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800298c:	fab2 f282 	clz	r2, r2
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	f042 0220 	orr.w	r2, r2, #32
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	f002 021f 	and.w	r2, r2, #31
 800299c:	2101      	movs	r1, #1
 800299e:	fa01 f202 	lsl.w	r2, r1, r2
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0b0      	beq.n	800290a <HAL_RCC_OscConfig+0x1c6>
 80029a8:	e057      	b.n	8002a5a <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029aa:	f7fe fd95 	bl	80014d8 <HAL_GetTick>
 80029ae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b2:	e00a      	b.n	80029ca <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029b4:	f7fe fd90 	bl	80014d8 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b64      	cmp	r3, #100	@ 0x64
 80029c2:	d902      	bls.n	80029ca <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	f000 bec4 	b.w	8003752 <HAL_RCC_OscConfig+0x100e>
 80029ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029ce:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80029d6:	fa93 f3a3 	rbit	r3, r3
 80029da:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80029de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029e2:	fab3 f383 	clz	r3, r3
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80029ea:	d802      	bhi.n	80029f2 <HAL_RCC_OscConfig+0x2ae>
 80029ec:	4b19      	ldr	r3, [pc, #100]	@ (8002a54 <HAL_RCC_OscConfig+0x310>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	e015      	b.n	8002a1e <HAL_RCC_OscConfig+0x2da>
 80029f2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029f6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002a06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a0a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002a0e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002a12:	fa93 f3a3 	rbit	r3, r3
 8002a16:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a54 <HAL_RCC_OscConfig+0x310>)
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a22:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002a26:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002a2a:	fa92 f2a2 	rbit	r2, r2
 8002a2e:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002a32:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002a36:	fab2 f282 	clz	r2, r2
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	f042 0220 	orr.w	r2, r2, #32
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	f002 021f 	and.w	r2, r2, #31
 8002a46:	2101      	movs	r1, #1
 8002a48:	fa01 f202 	lsl.w	r2, r1, r2
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1b0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x270>
 8002a52:	e002      	b.n	8002a5a <HAL_RCC_OscConfig+0x316>
 8002a54:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 816c 	beq.w	8002d48 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a70:	4bcc      	ldr	r3, [pc, #816]	@ (8002da4 <HAL_RCC_OscConfig+0x660>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 030c 	and.w	r3, r3, #12
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00b      	beq.n	8002a94 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a7c:	4bc9      	ldr	r3, [pc, #804]	@ (8002da4 <HAL_RCC_OscConfig+0x660>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 030c 	and.w	r3, r3, #12
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	d16d      	bne.n	8002b64 <HAL_RCC_OscConfig+0x420>
 8002a88:	4bc6      	ldr	r3, [pc, #792]	@ (8002da4 <HAL_RCC_OscConfig+0x660>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d167      	bne.n	8002b64 <HAL_RCC_OscConfig+0x420>
 8002a94:	2302      	movs	r3, #2
 8002a96:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002a9e:	fa93 f3a3 	rbit	r3, r3
 8002aa2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002aa6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aaa:	fab3 f383 	clz	r3, r3
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ab2:	d802      	bhi.n	8002aba <HAL_RCC_OscConfig+0x376>
 8002ab4:	4bbb      	ldr	r3, [pc, #748]	@ (8002da4 <HAL_RCC_OscConfig+0x660>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	e013      	b.n	8002ae2 <HAL_RCC_OscConfig+0x39e>
 8002aba:	2302      	movs	r3, #2
 8002abc:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac0:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002ac4:	fa93 f3a3 	rbit	r3, r3
 8002ac8:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002acc:	2302      	movs	r3, #2
 8002ace:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002ad2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002ad6:	fa93 f3a3 	rbit	r3, r3
 8002ada:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002ade:	4bb1      	ldr	r3, [pc, #708]	@ (8002da4 <HAL_RCC_OscConfig+0x660>)
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002ae8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002aec:	fa92 f2a2 	rbit	r2, r2
 8002af0:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002af4:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002af8:	fab2 f282 	clz	r2, r2
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	f042 0220 	orr.w	r2, r2, #32
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	f002 021f 	and.w	r2, r2, #31
 8002b08:	2101      	movs	r1, #1
 8002b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00a      	beq.n	8002b2a <HAL_RCC_OscConfig+0x3e6>
 8002b14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d002      	beq.n	8002b2a <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	f000 be14 	b.w	8003752 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b2a:	4b9e      	ldr	r3, [pc, #632]	@ (8002da4 <HAL_RCC_OscConfig+0x660>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	21f8      	movs	r1, #248	@ 0xf8
 8002b40:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b44:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002b48:	fa91 f1a1 	rbit	r1, r1
 8002b4c:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002b50:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002b54:	fab1 f181 	clz	r1, r1
 8002b58:	b2c9      	uxtb	r1, r1
 8002b5a:	408b      	lsls	r3, r1
 8002b5c:	4991      	ldr	r1, [pc, #580]	@ (8002da4 <HAL_RCC_OscConfig+0x660>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b62:	e0f1      	b.n	8002d48 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b68:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 8083 	beq.w	8002c7c <HAL_RCC_OscConfig+0x538>
 8002b76:	2301      	movs	r3, #1
 8002b78:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002b80:	fa93 f3a3 	rbit	r3, r3
 8002b84:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002b88:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b8c:	fab3 f383 	clz	r3, r3
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b96:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba2:	f7fe fc99 	bl	80014d8 <HAL_GetTick>
 8002ba6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002baa:	e00a      	b.n	8002bc2 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bac:	f7fe fc94 	bl	80014d8 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d902      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	f000 bdc8 	b.w	8003752 <HAL_RCC_OscConfig+0x100e>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002bcc:	fa93 f3a3 	rbit	r3, r3
 8002bd0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002bd4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd8:	fab3 f383 	clz	r3, r3
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b3f      	cmp	r3, #63	@ 0x3f
 8002be0:	d802      	bhi.n	8002be8 <HAL_RCC_OscConfig+0x4a4>
 8002be2:	4b70      	ldr	r3, [pc, #448]	@ (8002da4 <HAL_RCC_OscConfig+0x660>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	e013      	b.n	8002c10 <HAL_RCC_OscConfig+0x4cc>
 8002be8:	2302      	movs	r3, #2
 8002bea:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002bf2:	fa93 f3a3 	rbit	r3, r3
 8002bf6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002c00:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002c04:	fa93 f3a3 	rbit	r3, r3
 8002c08:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002c0c:	4b65      	ldr	r3, [pc, #404]	@ (8002da4 <HAL_RCC_OscConfig+0x660>)
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c10:	2202      	movs	r2, #2
 8002c12:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002c16:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002c1a:	fa92 f2a2 	rbit	r2, r2
 8002c1e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002c22:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002c26:	fab2 f282 	clz	r2, r2
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	f042 0220 	orr.w	r2, r2, #32
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	f002 021f 	and.w	r2, r2, #31
 8002c36:	2101      	movs	r1, #1
 8002c38:	fa01 f202 	lsl.w	r2, r1, r2
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0b4      	beq.n	8002bac <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c42:	4b58      	ldr	r3, [pc, #352]	@ (8002da4 <HAL_RCC_OscConfig+0x660>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	21f8      	movs	r1, #248	@ 0xf8
 8002c58:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002c60:	fa91 f1a1 	rbit	r1, r1
 8002c64:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002c68:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002c6c:	fab1 f181 	clz	r1, r1
 8002c70:	b2c9      	uxtb	r1, r1
 8002c72:	408b      	lsls	r3, r1
 8002c74:	494b      	ldr	r1, [pc, #300]	@ (8002da4 <HAL_RCC_OscConfig+0x660>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	600b      	str	r3, [r1, #0]
 8002c7a:	e065      	b.n	8002d48 <HAL_RCC_OscConfig+0x604>
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c82:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002c86:	fa93 f3a3 	rbit	r3, r3
 8002c8a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002c8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c92:	fab3 f383 	clz	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002c9c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca8:	f7fe fc16 	bl	80014d8 <HAL_GetTick>
 8002cac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb0:	e00a      	b.n	8002cc8 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cb2:	f7fe fc11 	bl	80014d8 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d902      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	f000 bd45 	b.w	8003752 <HAL_RCC_OscConfig+0x100e>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002cd2:	fa93 f3a3 	rbit	r3, r3
 8002cd6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002cda:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cde:	fab3 f383 	clz	r3, r3
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ce6:	d802      	bhi.n	8002cee <HAL_RCC_OscConfig+0x5aa>
 8002ce8:	4b2e      	ldr	r3, [pc, #184]	@ (8002da4 <HAL_RCC_OscConfig+0x660>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	e013      	b.n	8002d16 <HAL_RCC_OscConfig+0x5d2>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002cf8:	fa93 f3a3 	rbit	r3, r3
 8002cfc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002d00:	2302      	movs	r3, #2
 8002d02:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002d06:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002d0a:	fa93 f3a3 	rbit	r3, r3
 8002d0e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002d12:	4b24      	ldr	r3, [pc, #144]	@ (8002da4 <HAL_RCC_OscConfig+0x660>)
 8002d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d16:	2202      	movs	r2, #2
 8002d18:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002d1c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002d20:	fa92 f2a2 	rbit	r2, r2
 8002d24:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002d28:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002d2c:	fab2 f282 	clz	r2, r2
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	f042 0220 	orr.w	r2, r2, #32
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	f002 021f 	and.w	r2, r2, #31
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d42:	4013      	ands	r3, r2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1b4      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d4c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0308 	and.w	r3, r3, #8
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 8115 	beq.w	8002f88 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d07e      	beq.n	8002e6c <HAL_RCC_OscConfig+0x728>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002d78:	fa93 f3a3 	rbit	r3, r3
 8002d7c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002d80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d84:	fab3 f383 	clz	r3, r3
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	4b06      	ldr	r3, [pc, #24]	@ (8002da8 <HAL_RCC_OscConfig+0x664>)
 8002d8e:	4413      	add	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	461a      	mov	r2, r3
 8002d94:	2301      	movs	r3, #1
 8002d96:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d98:	f7fe fb9e 	bl	80014d8 <HAL_GetTick>
 8002d9c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da0:	e00f      	b.n	8002dc2 <HAL_RCC_OscConfig+0x67e>
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000
 8002da8:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dac:	f7fe fb94 	bl	80014d8 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d902      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	f000 bcc8 	b.w	8003752 <HAL_RCC_OscConfig+0x100e>
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002dcc:	fa93 f3a3 	rbit	r3, r3
 8002dd0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002dd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002ddc:	2202      	movs	r2, #2
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	fa93 f2a3 	rbit	r2, r3
 8002dee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002e00:	2202      	movs	r2, #2
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	fa93 f2a3 	rbit	r2, r3
 8002e12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e16:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002e1a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e1c:	4bb0      	ldr	r3, [pc, #704]	@ (80030e0 <HAL_RCC_OscConfig+0x99c>)
 8002e1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e24:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002e28:	2102      	movs	r1, #2
 8002e2a:	6019      	str	r1, [r3, #0]
 8002e2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e30:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	fa93 f1a3 	rbit	r1, r3
 8002e3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e3e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002e42:	6019      	str	r1, [r3, #0]
  return result;
 8002e44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e48:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	fab3 f383 	clz	r3, r3
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	f003 031f 	and.w	r3, r3, #31
 8002e5e:	2101      	movs	r1, #1
 8002e60:	fa01 f303 	lsl.w	r3, r1, r3
 8002e64:	4013      	ands	r3, r2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0a0      	beq.n	8002dac <HAL_RCC_OscConfig+0x668>
 8002e6a:	e08d      	b.n	8002f88 <HAL_RCC_OscConfig+0x844>
 8002e6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e70:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002e74:	2201      	movs	r2, #1
 8002e76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e7c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	fa93 f2a3 	rbit	r2, r3
 8002e86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e8a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002e8e:	601a      	str	r2, [r3, #0]
  return result;
 8002e90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e94:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002e98:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e9a:	fab3 f383 	clz	r3, r3
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4b90      	ldr	r3, [pc, #576]	@ (80030e4 <HAL_RCC_OscConfig+0x9a0>)
 8002ea4:	4413      	add	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	2300      	movs	r3, #0
 8002eac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eae:	f7fe fb13 	bl	80014d8 <HAL_GetTick>
 8002eb2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb6:	e00a      	b.n	8002ece <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eb8:	f7fe fb0e 	bl	80014d8 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d902      	bls.n	8002ece <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	f000 bc42 	b.w	8003752 <HAL_RCC_OscConfig+0x100e>
 8002ece:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ed2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ede:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	fa93 f2a3 	rbit	r2, r3
 8002ee8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002efa:	2202      	movs	r2, #2
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f02:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	fa93 f2a3 	rbit	r2, r3
 8002f0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f10:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f1a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002f1e:	2202      	movs	r2, #2
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f26:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	fa93 f2a3 	rbit	r2, r3
 8002f30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f34:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002f38:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f3a:	4b69      	ldr	r3, [pc, #420]	@ (80030e0 <HAL_RCC_OscConfig+0x99c>)
 8002f3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f42:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002f46:	2102      	movs	r1, #2
 8002f48:	6019      	str	r1, [r3, #0]
 8002f4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f4e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	fa93 f1a3 	rbit	r1, r3
 8002f58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f5c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002f60:	6019      	str	r1, [r3, #0]
  return result;
 8002f62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f66:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	fab3 f383 	clz	r3, r3
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	f003 031f 	and.w	r3, r3, #31
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d197      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f8c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 819e 	beq.w	80032da <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fa4:	4b4e      	ldr	r3, [pc, #312]	@ (80030e0 <HAL_RCC_OscConfig+0x99c>)
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d116      	bne.n	8002fde <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fb0:	4b4b      	ldr	r3, [pc, #300]	@ (80030e0 <HAL_RCC_OscConfig+0x99c>)
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	4a4a      	ldr	r2, [pc, #296]	@ (80030e0 <HAL_RCC_OscConfig+0x99c>)
 8002fb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fba:	61d3      	str	r3, [r2, #28]
 8002fbc:	4b48      	ldr	r3, [pc, #288]	@ (80030e0 <HAL_RCC_OscConfig+0x99c>)
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002fc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fd2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002fd6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fde:	4b42      	ldr	r3, [pc, #264]	@ (80030e8 <HAL_RCC_OscConfig+0x9a4>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d11a      	bne.n	8003020 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fea:	4b3f      	ldr	r3, [pc, #252]	@ (80030e8 <HAL_RCC_OscConfig+0x9a4>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a3e      	ldr	r2, [pc, #248]	@ (80030e8 <HAL_RCC_OscConfig+0x9a4>)
 8002ff0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ff4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ff6:	f7fe fa6f 	bl	80014d8 <HAL_GetTick>
 8002ffa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffe:	e009      	b.n	8003014 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003000:	f7fe fa6a 	bl	80014d8 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b64      	cmp	r3, #100	@ 0x64
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e39e      	b.n	8003752 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003014:	4b34      	ldr	r3, [pc, #208]	@ (80030e8 <HAL_RCC_OscConfig+0x9a4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0ef      	beq.n	8003000 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003020:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003024:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d106      	bne.n	800303e <HAL_RCC_OscConfig+0x8fa>
 8003030:	4b2b      	ldr	r3, [pc, #172]	@ (80030e0 <HAL_RCC_OscConfig+0x99c>)
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	4a2a      	ldr	r2, [pc, #168]	@ (80030e0 <HAL_RCC_OscConfig+0x99c>)
 8003036:	f043 0301 	orr.w	r3, r3, #1
 800303a:	6213      	str	r3, [r2, #32]
 800303c:	e035      	b.n	80030aa <HAL_RCC_OscConfig+0x966>
 800303e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003042:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10c      	bne.n	8003068 <HAL_RCC_OscConfig+0x924>
 800304e:	4b24      	ldr	r3, [pc, #144]	@ (80030e0 <HAL_RCC_OscConfig+0x99c>)
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	4a23      	ldr	r2, [pc, #140]	@ (80030e0 <HAL_RCC_OscConfig+0x99c>)
 8003054:	f023 0301 	bic.w	r3, r3, #1
 8003058:	6213      	str	r3, [r2, #32]
 800305a:	4b21      	ldr	r3, [pc, #132]	@ (80030e0 <HAL_RCC_OscConfig+0x99c>)
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	4a20      	ldr	r2, [pc, #128]	@ (80030e0 <HAL_RCC_OscConfig+0x99c>)
 8003060:	f023 0304 	bic.w	r3, r3, #4
 8003064:	6213      	str	r3, [r2, #32]
 8003066:	e020      	b.n	80030aa <HAL_RCC_OscConfig+0x966>
 8003068:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800306c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	2b05      	cmp	r3, #5
 8003076:	d10c      	bne.n	8003092 <HAL_RCC_OscConfig+0x94e>
 8003078:	4b19      	ldr	r3, [pc, #100]	@ (80030e0 <HAL_RCC_OscConfig+0x99c>)
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	4a18      	ldr	r2, [pc, #96]	@ (80030e0 <HAL_RCC_OscConfig+0x99c>)
 800307e:	f043 0304 	orr.w	r3, r3, #4
 8003082:	6213      	str	r3, [r2, #32]
 8003084:	4b16      	ldr	r3, [pc, #88]	@ (80030e0 <HAL_RCC_OscConfig+0x99c>)
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	4a15      	ldr	r2, [pc, #84]	@ (80030e0 <HAL_RCC_OscConfig+0x99c>)
 800308a:	f043 0301 	orr.w	r3, r3, #1
 800308e:	6213      	str	r3, [r2, #32]
 8003090:	e00b      	b.n	80030aa <HAL_RCC_OscConfig+0x966>
 8003092:	4b13      	ldr	r3, [pc, #76]	@ (80030e0 <HAL_RCC_OscConfig+0x99c>)
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	4a12      	ldr	r2, [pc, #72]	@ (80030e0 <HAL_RCC_OscConfig+0x99c>)
 8003098:	f023 0301 	bic.w	r3, r3, #1
 800309c:	6213      	str	r3, [r2, #32]
 800309e:	4b10      	ldr	r3, [pc, #64]	@ (80030e0 <HAL_RCC_OscConfig+0x99c>)
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	4a0f      	ldr	r2, [pc, #60]	@ (80030e0 <HAL_RCC_OscConfig+0x99c>)
 80030a4:	f023 0304 	bic.w	r3, r3, #4
 80030a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 8087 	beq.w	80031ca <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030bc:	f7fe fa0c 	bl	80014d8 <HAL_GetTick>
 80030c0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c4:	e012      	b.n	80030ec <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030c6:	f7fe fa07 	bl	80014d8 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d908      	bls.n	80030ec <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e339      	b.n	8003752 <HAL_RCC_OscConfig+0x100e>
 80030de:	bf00      	nop
 80030e0:	40021000 	.word	0x40021000
 80030e4:	10908120 	.word	0x10908120
 80030e8:	40007000 	.word	0x40007000
 80030ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80030f4:	2202      	movs	r2, #2
 80030f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	fa93 f2a3 	rbit	r2, r3
 8003106:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800310a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003114:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003118:	2202      	movs	r2, #2
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003120:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	fa93 f2a3 	rbit	r2, r3
 800312a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800312e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003132:	601a      	str	r2, [r3, #0]
  return result;
 8003134:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003138:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800313c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800313e:	fab3 f383 	clz	r3, r3
 8003142:	b2db      	uxtb	r3, r3
 8003144:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d102      	bne.n	8003154 <HAL_RCC_OscConfig+0xa10>
 800314e:	4b98      	ldr	r3, [pc, #608]	@ (80033b0 <HAL_RCC_OscConfig+0xc6c>)
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	e013      	b.n	800317c <HAL_RCC_OscConfig+0xa38>
 8003154:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003158:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800315c:	2202      	movs	r2, #2
 800315e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003160:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003164:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	fa93 f2a3 	rbit	r2, r3
 800316e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003172:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	4b8d      	ldr	r3, [pc, #564]	@ (80033b0 <HAL_RCC_OscConfig+0xc6c>)
 800317a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003180:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003184:	2102      	movs	r1, #2
 8003186:	6011      	str	r1, [r2, #0]
 8003188:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800318c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003190:	6812      	ldr	r2, [r2, #0]
 8003192:	fa92 f1a2 	rbit	r1, r2
 8003196:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800319a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800319e:	6011      	str	r1, [r2, #0]
  return result;
 80031a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031a4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80031a8:	6812      	ldr	r2, [r2, #0]
 80031aa:	fab2 f282 	clz	r2, r2
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031b4:	b2d2      	uxtb	r2, r2
 80031b6:	f002 021f 	and.w	r2, r2, #31
 80031ba:	2101      	movs	r1, #1
 80031bc:	fa01 f202 	lsl.w	r2, r1, r2
 80031c0:	4013      	ands	r3, r2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f43f af7f 	beq.w	80030c6 <HAL_RCC_OscConfig+0x982>
 80031c8:	e07d      	b.n	80032c6 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ca:	f7fe f985 	bl	80014d8 <HAL_GetTick>
 80031ce:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031d2:	e00b      	b.n	80031ec <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031d4:	f7fe f980 	bl	80014d8 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e2b2      	b.n	8003752 <HAL_RCC_OscConfig+0x100e>
 80031ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80031f4:	2202      	movs	r2, #2
 80031f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031fc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	fa93 f2a3 	rbit	r2, r3
 8003206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800320a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003214:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003218:	2202      	movs	r2, #2
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003220:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	fa93 f2a3 	rbit	r2, r3
 800322a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800322e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003232:	601a      	str	r2, [r3, #0]
  return result;
 8003234:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003238:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800323c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800323e:	fab3 f383 	clz	r3, r3
 8003242:	b2db      	uxtb	r3, r3
 8003244:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d102      	bne.n	8003254 <HAL_RCC_OscConfig+0xb10>
 800324e:	4b58      	ldr	r3, [pc, #352]	@ (80033b0 <HAL_RCC_OscConfig+0xc6c>)
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	e013      	b.n	800327c <HAL_RCC_OscConfig+0xb38>
 8003254:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003258:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800325c:	2202      	movs	r2, #2
 800325e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003260:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003264:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	fa93 f2a3 	rbit	r2, r3
 800326e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003272:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	4b4d      	ldr	r3, [pc, #308]	@ (80033b0 <HAL_RCC_OscConfig+0xc6c>)
 800327a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003280:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003284:	2102      	movs	r1, #2
 8003286:	6011      	str	r1, [r2, #0]
 8003288:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800328c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003290:	6812      	ldr	r2, [r2, #0]
 8003292:	fa92 f1a2 	rbit	r1, r2
 8003296:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800329a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800329e:	6011      	str	r1, [r2, #0]
  return result;
 80032a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032a4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80032a8:	6812      	ldr	r2, [r2, #0]
 80032aa:	fab2 f282 	clz	r2, r2
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	f002 021f 	and.w	r2, r2, #31
 80032ba:	2101      	movs	r1, #1
 80032bc:	fa01 f202 	lsl.w	r2, r1, r2
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d186      	bne.n	80031d4 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032c6:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d105      	bne.n	80032da <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ce:	4b38      	ldr	r3, [pc, #224]	@ (80033b0 <HAL_RCC_OscConfig+0xc6c>)
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	4a37      	ldr	r2, [pc, #220]	@ (80033b0 <HAL_RCC_OscConfig+0xc6c>)
 80032d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032d8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 8232 	beq.w	8003750 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ec:	4b30      	ldr	r3, [pc, #192]	@ (80033b0 <HAL_RCC_OscConfig+0xc6c>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 030c 	and.w	r3, r3, #12
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	f000 8201 	beq.w	80036fc <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	2b02      	cmp	r3, #2
 8003308:	f040 8157 	bne.w	80035ba <HAL_RCC_OscConfig+0xe76>
 800330c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003310:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003314:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003318:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800331e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	fa93 f2a3 	rbit	r2, r3
 8003328:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800332c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003330:	601a      	str	r2, [r3, #0]
  return result;
 8003332:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003336:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800333a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333c:	fab3 f383 	clz	r3, r3
 8003340:	b2db      	uxtb	r3, r3
 8003342:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003346:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	461a      	mov	r2, r3
 800334e:	2300      	movs	r3, #0
 8003350:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003352:	f7fe f8c1 	bl	80014d8 <HAL_GetTick>
 8003356:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800335a:	e009      	b.n	8003370 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800335c:	f7fe f8bc 	bl	80014d8 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e1f0      	b.n	8003752 <HAL_RCC_OscConfig+0x100e>
 8003370:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003374:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003378:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800337c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003382:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	fa93 f2a3 	rbit	r2, r3
 800338c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003390:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003394:	601a      	str	r2, [r3, #0]
  return result;
 8003396:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800339a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800339e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a0:	fab3 f383 	clz	r3, r3
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80033a8:	d804      	bhi.n	80033b4 <HAL_RCC_OscConfig+0xc70>
 80033aa:	4b01      	ldr	r3, [pc, #4]	@ (80033b0 <HAL_RCC_OscConfig+0xc6c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	e029      	b.n	8003404 <HAL_RCC_OscConfig+0xcc0>
 80033b0:	40021000 	.word	0x40021000
 80033b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033b8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80033bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033c6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	fa93 f2a3 	rbit	r2, r3
 80033d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033d4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033de:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80033e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ec:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	fa93 f2a3 	rbit	r2, r3
 80033f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033fa:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	4bc3      	ldr	r3, [pc, #780]	@ (8003710 <HAL_RCC_OscConfig+0xfcc>)
 8003402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003404:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003408:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800340c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003410:	6011      	str	r1, [r2, #0]
 8003412:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003416:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800341a:	6812      	ldr	r2, [r2, #0]
 800341c:	fa92 f1a2 	rbit	r1, r2
 8003420:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003424:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003428:	6011      	str	r1, [r2, #0]
  return result;
 800342a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800342e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003432:	6812      	ldr	r2, [r2, #0]
 8003434:	fab2 f282 	clz	r2, r2
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	f042 0220 	orr.w	r2, r2, #32
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	f002 021f 	and.w	r2, r2, #31
 8003444:	2101      	movs	r1, #1
 8003446:	fa01 f202 	lsl.w	r2, r1, r2
 800344a:	4013      	ands	r3, r2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d185      	bne.n	800335c <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003450:	4baf      	ldr	r3, [pc, #700]	@ (8003710 <HAL_RCC_OscConfig+0xfcc>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003458:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800345c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003464:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003468:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	430b      	orrs	r3, r1
 8003472:	49a7      	ldr	r1, [pc, #668]	@ (8003710 <HAL_RCC_OscConfig+0xfcc>)
 8003474:	4313      	orrs	r3, r2
 8003476:	604b      	str	r3, [r1, #4]
 8003478:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800347c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003480:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003484:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003486:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800348a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	fa93 f2a3 	rbit	r2, r3
 8003494:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003498:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800349c:	601a      	str	r2, [r3, #0]
  return result;
 800349e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034a2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80034a6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a8:	fab3 f383 	clz	r3, r3
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80034b2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	461a      	mov	r2, r3
 80034ba:	2301      	movs	r3, #1
 80034bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034be:	f7fe f80b 	bl	80014d8 <HAL_GetTick>
 80034c2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034c6:	e009      	b.n	80034dc <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034c8:	f7fe f806 	bl	80014d8 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e13a      	b.n	8003752 <HAL_RCC_OscConfig+0x100e>
 80034dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80034e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ee:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	fa93 f2a3 	rbit	r2, r3
 80034f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034fc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003500:	601a      	str	r2, [r3, #0]
  return result;
 8003502:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003506:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800350a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800350c:	fab3 f383 	clz	r3, r3
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b3f      	cmp	r3, #63	@ 0x3f
 8003514:	d802      	bhi.n	800351c <HAL_RCC_OscConfig+0xdd8>
 8003516:	4b7e      	ldr	r3, [pc, #504]	@ (8003710 <HAL_RCC_OscConfig+0xfcc>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	e027      	b.n	800356c <HAL_RCC_OscConfig+0xe28>
 800351c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003520:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003524:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003528:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800352e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	fa93 f2a3 	rbit	r2, r3
 8003538:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800353c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003546:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800354a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003554:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	fa93 f2a3 	rbit	r2, r3
 800355e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003562:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	4b69      	ldr	r3, [pc, #420]	@ (8003710 <HAL_RCC_OscConfig+0xfcc>)
 800356a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003570:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003574:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003578:	6011      	str	r1, [r2, #0]
 800357a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800357e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003582:	6812      	ldr	r2, [r2, #0]
 8003584:	fa92 f1a2 	rbit	r1, r2
 8003588:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800358c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003590:	6011      	str	r1, [r2, #0]
  return result;
 8003592:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003596:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800359a:	6812      	ldr	r2, [r2, #0]
 800359c:	fab2 f282 	clz	r2, r2
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	f042 0220 	orr.w	r2, r2, #32
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	f002 021f 	and.w	r2, r2, #31
 80035ac:	2101      	movs	r1, #1
 80035ae:	fa01 f202 	lsl.w	r2, r1, r2
 80035b2:	4013      	ands	r3, r2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d087      	beq.n	80034c8 <HAL_RCC_OscConfig+0xd84>
 80035b8:	e0ca      	b.n	8003750 <HAL_RCC_OscConfig+0x100c>
 80035ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035be:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80035c2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80035c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035cc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	fa93 f2a3 	rbit	r2, r3
 80035d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035da:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80035de:	601a      	str	r2, [r3, #0]
  return result;
 80035e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035e4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80035e8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ea:	fab3 f383 	clz	r3, r3
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80035f4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	461a      	mov	r2, r3
 80035fc:	2300      	movs	r3, #0
 80035fe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003600:	f7fd ff6a 	bl	80014d8 <HAL_GetTick>
 8003604:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003608:	e009      	b.n	800361e <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800360a:	f7fd ff65 	bl	80014d8 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e099      	b.n	8003752 <HAL_RCC_OscConfig+0x100e>
 800361e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003622:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003626:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800362a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003630:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	fa93 f2a3 	rbit	r2, r3
 800363a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800363e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003642:	601a      	str	r2, [r3, #0]
  return result;
 8003644:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003648:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800364c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800364e:	fab3 f383 	clz	r3, r3
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b3f      	cmp	r3, #63	@ 0x3f
 8003656:	d802      	bhi.n	800365e <HAL_RCC_OscConfig+0xf1a>
 8003658:	4b2d      	ldr	r3, [pc, #180]	@ (8003710 <HAL_RCC_OscConfig+0xfcc>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	e027      	b.n	80036ae <HAL_RCC_OscConfig+0xf6a>
 800365e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003662:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003666:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800366a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003670:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	fa93 f2a3 	rbit	r2, r3
 800367a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800367e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003688:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800368c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003696:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	fa93 f2a3 	rbit	r2, r3
 80036a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036a4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	4b19      	ldr	r3, [pc, #100]	@ (8003710 <HAL_RCC_OscConfig+0xfcc>)
 80036ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036b2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80036b6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80036ba:	6011      	str	r1, [r2, #0]
 80036bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036c0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80036c4:	6812      	ldr	r2, [r2, #0]
 80036c6:	fa92 f1a2 	rbit	r1, r2
 80036ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036ce:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80036d2:	6011      	str	r1, [r2, #0]
  return result;
 80036d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036d8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80036dc:	6812      	ldr	r2, [r2, #0]
 80036de:	fab2 f282 	clz	r2, r2
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	f042 0220 	orr.w	r2, r2, #32
 80036e8:	b2d2      	uxtb	r2, r2
 80036ea:	f002 021f 	and.w	r2, r2, #31
 80036ee:	2101      	movs	r1, #1
 80036f0:	fa01 f202 	lsl.w	r2, r1, r2
 80036f4:	4013      	ands	r3, r2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d187      	bne.n	800360a <HAL_RCC_OscConfig+0xec6>
 80036fa:	e029      	b.n	8003750 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003700:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d103      	bne.n	8003714 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e020      	b.n	8003752 <HAL_RCC_OscConfig+0x100e>
 8003710:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003714:	4b11      	ldr	r3, [pc, #68]	@ (800375c <HAL_RCC_OscConfig+0x1018>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800371c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003720:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003724:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003728:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	429a      	cmp	r2, r3
 8003732:	d10b      	bne.n	800374c <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003734:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003738:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800373c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003740:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003748:	429a      	cmp	r2, r3
 800374a:	d001      	beq.n	8003750 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e000      	b.n	8003752 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40021000 	.word	0x40021000

08003760 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b09e      	sub	sp, #120	@ 0x78
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800376a:	2300      	movs	r3, #0
 800376c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e154      	b.n	8003a22 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003778:	4b89      	ldr	r3, [pc, #548]	@ (80039a0 <HAL_RCC_ClockConfig+0x240>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d910      	bls.n	80037a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003786:	4b86      	ldr	r3, [pc, #536]	@ (80039a0 <HAL_RCC_ClockConfig+0x240>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f023 0207 	bic.w	r2, r3, #7
 800378e:	4984      	ldr	r1, [pc, #528]	@ (80039a0 <HAL_RCC_ClockConfig+0x240>)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	4313      	orrs	r3, r2
 8003794:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003796:	4b82      	ldr	r3, [pc, #520]	@ (80039a0 <HAL_RCC_ClockConfig+0x240>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d001      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e13c      	b.n	8003a22 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d008      	beq.n	80037c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b4:	4b7b      	ldr	r3, [pc, #492]	@ (80039a4 <HAL_RCC_ClockConfig+0x244>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	4978      	ldr	r1, [pc, #480]	@ (80039a4 <HAL_RCC_ClockConfig+0x244>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 80cd 	beq.w	800396e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d137      	bne.n	800384c <HAL_RCC_ClockConfig+0xec>
 80037dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037e4:	fa93 f3a3 	rbit	r3, r3
 80037e8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80037ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ec:	fab3 f383 	clz	r3, r3
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b3f      	cmp	r3, #63	@ 0x3f
 80037f4:	d802      	bhi.n	80037fc <HAL_RCC_ClockConfig+0x9c>
 80037f6:	4b6b      	ldr	r3, [pc, #428]	@ (80039a4 <HAL_RCC_ClockConfig+0x244>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	e00f      	b.n	800381c <HAL_RCC_ClockConfig+0xbc>
 80037fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003800:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003802:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003804:	fa93 f3a3 	rbit	r3, r3
 8003808:	667b      	str	r3, [r7, #100]	@ 0x64
 800380a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800380e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003810:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003812:	fa93 f3a3 	rbit	r3, r3
 8003816:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003818:	4b62      	ldr	r3, [pc, #392]	@ (80039a4 <HAL_RCC_ClockConfig+0x244>)
 800381a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003820:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003822:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003824:	fa92 f2a2 	rbit	r2, r2
 8003828:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800382a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800382c:	fab2 f282 	clz	r2, r2
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	f042 0220 	orr.w	r2, r2, #32
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	f002 021f 	and.w	r2, r2, #31
 800383c:	2101      	movs	r1, #1
 800383e:	fa01 f202 	lsl.w	r2, r1, r2
 8003842:	4013      	ands	r3, r2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d171      	bne.n	800392c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0ea      	b.n	8003a22 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2b02      	cmp	r3, #2
 8003852:	d137      	bne.n	80038c4 <HAL_RCC_ClockConfig+0x164>
 8003854:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003858:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800385c:	fa93 f3a3 	rbit	r3, r3
 8003860:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003862:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003864:	fab3 f383 	clz	r3, r3
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b3f      	cmp	r3, #63	@ 0x3f
 800386c:	d802      	bhi.n	8003874 <HAL_RCC_ClockConfig+0x114>
 800386e:	4b4d      	ldr	r3, [pc, #308]	@ (80039a4 <HAL_RCC_ClockConfig+0x244>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	e00f      	b.n	8003894 <HAL_RCC_ClockConfig+0x134>
 8003874:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003878:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800387c:	fa93 f3a3 	rbit	r3, r3
 8003880:	647b      	str	r3, [r7, #68]	@ 0x44
 8003882:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003886:	643b      	str	r3, [r7, #64]	@ 0x40
 8003888:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800388a:	fa93 f3a3 	rbit	r3, r3
 800388e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003890:	4b44      	ldr	r3, [pc, #272]	@ (80039a4 <HAL_RCC_ClockConfig+0x244>)
 8003892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003894:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003898:	63ba      	str	r2, [r7, #56]	@ 0x38
 800389a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800389c:	fa92 f2a2 	rbit	r2, r2
 80038a0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80038a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038a4:	fab2 f282 	clz	r2, r2
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	f042 0220 	orr.w	r2, r2, #32
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	f002 021f 	and.w	r2, r2, #31
 80038b4:	2101      	movs	r1, #1
 80038b6:	fa01 f202 	lsl.w	r2, r1, r2
 80038ba:	4013      	ands	r3, r2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d135      	bne.n	800392c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e0ae      	b.n	8003a22 <HAL_RCC_ClockConfig+0x2c2>
 80038c4:	2302      	movs	r3, #2
 80038c6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ca:	fa93 f3a3 	rbit	r3, r3
 80038ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80038d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d2:	fab3 f383 	clz	r3, r3
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b3f      	cmp	r3, #63	@ 0x3f
 80038da:	d802      	bhi.n	80038e2 <HAL_RCC_ClockConfig+0x182>
 80038dc:	4b31      	ldr	r3, [pc, #196]	@ (80039a4 <HAL_RCC_ClockConfig+0x244>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	e00d      	b.n	80038fe <HAL_RCC_ClockConfig+0x19e>
 80038e2:	2302      	movs	r3, #2
 80038e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e8:	fa93 f3a3 	rbit	r3, r3
 80038ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80038ee:	2302      	movs	r3, #2
 80038f0:	623b      	str	r3, [r7, #32]
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	fa93 f3a3 	rbit	r3, r3
 80038f8:	61fb      	str	r3, [r7, #28]
 80038fa:	4b2a      	ldr	r3, [pc, #168]	@ (80039a4 <HAL_RCC_ClockConfig+0x244>)
 80038fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fe:	2202      	movs	r2, #2
 8003900:	61ba      	str	r2, [r7, #24]
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	fa92 f2a2 	rbit	r2, r2
 8003908:	617a      	str	r2, [r7, #20]
  return result;
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	fab2 f282 	clz	r2, r2
 8003910:	b2d2      	uxtb	r2, r2
 8003912:	f042 0220 	orr.w	r2, r2, #32
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	f002 021f 	and.w	r2, r2, #31
 800391c:	2101      	movs	r1, #1
 800391e:	fa01 f202 	lsl.w	r2, r1, r2
 8003922:	4013      	ands	r3, r2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e07a      	b.n	8003a22 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800392c:	4b1d      	ldr	r3, [pc, #116]	@ (80039a4 <HAL_RCC_ClockConfig+0x244>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f023 0203 	bic.w	r2, r3, #3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	491a      	ldr	r1, [pc, #104]	@ (80039a4 <HAL_RCC_ClockConfig+0x244>)
 800393a:	4313      	orrs	r3, r2
 800393c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800393e:	f7fd fdcb 	bl	80014d8 <HAL_GetTick>
 8003942:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003944:	e00a      	b.n	800395c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003946:	f7fd fdc7 	bl	80014d8 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003954:	4293      	cmp	r3, r2
 8003956:	d901      	bls.n	800395c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e062      	b.n	8003a22 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395c:	4b11      	ldr	r3, [pc, #68]	@ (80039a4 <HAL_RCC_ClockConfig+0x244>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f003 020c 	and.w	r2, r3, #12
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	429a      	cmp	r2, r3
 800396c:	d1eb      	bne.n	8003946 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800396e:	4b0c      	ldr	r3, [pc, #48]	@ (80039a0 <HAL_RCC_ClockConfig+0x240>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d215      	bcs.n	80039a8 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397c:	4b08      	ldr	r3, [pc, #32]	@ (80039a0 <HAL_RCC_ClockConfig+0x240>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f023 0207 	bic.w	r2, r3, #7
 8003984:	4906      	ldr	r1, [pc, #24]	@ (80039a0 <HAL_RCC_ClockConfig+0x240>)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	4313      	orrs	r3, r2
 800398a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800398c:	4b04      	ldr	r3, [pc, #16]	@ (80039a0 <HAL_RCC_ClockConfig+0x240>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	429a      	cmp	r2, r3
 8003998:	d006      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e041      	b.n	8003a22 <HAL_RCC_ClockConfig+0x2c2>
 800399e:	bf00      	nop
 80039a0:	40022000 	.word	0x40022000
 80039a4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d008      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039b4:	4b1d      	ldr	r3, [pc, #116]	@ (8003a2c <HAL_RCC_ClockConfig+0x2cc>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	491a      	ldr	r1, [pc, #104]	@ (8003a2c <HAL_RCC_ClockConfig+0x2cc>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d009      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039d2:	4b16      	ldr	r3, [pc, #88]	@ (8003a2c <HAL_RCC_ClockConfig+0x2cc>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	4912      	ldr	r1, [pc, #72]	@ (8003a2c <HAL_RCC_ClockConfig+0x2cc>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80039e6:	f000 f829 	bl	8003a3c <HAL_RCC_GetSysClockFreq>
 80039ea:	4601      	mov	r1, r0
 80039ec:	4b0f      	ldr	r3, [pc, #60]	@ (8003a2c <HAL_RCC_ClockConfig+0x2cc>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039f4:	22f0      	movs	r2, #240	@ 0xf0
 80039f6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	fa92 f2a2 	rbit	r2, r2
 80039fe:	60fa      	str	r2, [r7, #12]
  return result;
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	fab2 f282 	clz	r2, r2
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	40d3      	lsrs	r3, r2
 8003a0a:	4a09      	ldr	r2, [pc, #36]	@ (8003a30 <HAL_RCC_ClockConfig+0x2d0>)
 8003a0c:	5cd3      	ldrb	r3, [r2, r3]
 8003a0e:	fa21 f303 	lsr.w	r3, r1, r3
 8003a12:	4a08      	ldr	r2, [pc, #32]	@ (8003a34 <HAL_RCC_ClockConfig+0x2d4>)
 8003a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003a16:	4b08      	ldr	r3, [pc, #32]	@ (8003a38 <HAL_RCC_ClockConfig+0x2d8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fd fd18 	bl	8001450 <HAL_InitTick>
  
  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3778      	adds	r7, #120	@ 0x78
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	08004334 	.word	0x08004334
 8003a34:	20000000 	.word	0x20000000
 8003a38:	20000004 	.word	0x20000004

08003a3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	60fb      	str	r3, [r7, #12]
 8003a46:	2300      	movs	r3, #0
 8003a48:	60bb      	str	r3, [r7, #8]
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	2300      	movs	r3, #0
 8003a50:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003a56:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f003 030c 	and.w	r3, r3, #12
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d002      	beq.n	8003a6c <HAL_RCC_GetSysClockFreq+0x30>
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d003      	beq.n	8003a72 <HAL_RCC_GetSysClockFreq+0x36>
 8003a6a:	e026      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a6c:	4b19      	ldr	r3, [pc, #100]	@ (8003ad4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a6e:	613b      	str	r3, [r7, #16]
      break;
 8003a70:	e026      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	0c9b      	lsrs	r3, r3, #18
 8003a76:	f003 030f 	and.w	r3, r3, #15
 8003a7a:	4a17      	ldr	r2, [pc, #92]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a7c:	5cd3      	ldrb	r3, [r2, r3]
 8003a7e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003a80:	4b13      	ldr	r3, [pc, #76]	@ (8003ad0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a84:	f003 030f 	and.w	r3, r3, #15
 8003a88:	4a14      	ldr	r2, [pc, #80]	@ (8003adc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a8a:	5cd3      	ldrb	r3, [r2, r3]
 8003a8c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d008      	beq.n	8003aaa <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a98:	4a0e      	ldr	r2, [pc, #56]	@ (8003ad4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	fb02 f303 	mul.w	r3, r2, r3
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	e004      	b.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a0c      	ldr	r2, [pc, #48]	@ (8003ae0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003aae:	fb02 f303 	mul.w	r3, r2, r3
 8003ab2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	613b      	str	r3, [r7, #16]
      break;
 8003ab8:	e002      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003aba:	4b06      	ldr	r3, [pc, #24]	@ (8003ad4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003abc:	613b      	str	r3, [r7, #16]
      break;
 8003abe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ac0:	693b      	ldr	r3, [r7, #16]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	371c      	adds	r7, #28
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	007a1200 	.word	0x007a1200
 8003ad8:	0800434c 	.word	0x0800434c
 8003adc:	0800435c 	.word	0x0800435c
 8003ae0:	003d0900 	.word	0x003d0900

08003ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ae8:	4b03      	ldr	r3, [pc, #12]	@ (8003af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aea:	681b      	ldr	r3, [r3, #0]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	20000000 	.word	0x20000000

08003afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003b02:	f7ff ffef 	bl	8003ae4 <HAL_RCC_GetHCLKFreq>
 8003b06:	4601      	mov	r1, r0
 8003b08:	4b0b      	ldr	r3, [pc, #44]	@ (8003b38 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003b10:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003b14:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	fa92 f2a2 	rbit	r2, r2
 8003b1c:	603a      	str	r2, [r7, #0]
  return result;
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	fab2 f282 	clz	r2, r2
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	40d3      	lsrs	r3, r2
 8003b28:	4a04      	ldr	r2, [pc, #16]	@ (8003b3c <HAL_RCC_GetPCLK1Freq+0x40>)
 8003b2a:	5cd3      	ldrb	r3, [r2, r3]
 8003b2c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003b30:	4618      	mov	r0, r3
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	08004344 	.word	0x08004344

08003b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003b46:	f7ff ffcd 	bl	8003ae4 <HAL_RCC_GetHCLKFreq>
 8003b4a:	4601      	mov	r1, r0
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b7c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003b54:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003b58:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	fa92 f2a2 	rbit	r2, r2
 8003b60:	603a      	str	r2, [r7, #0]
  return result;
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	fab2 f282 	clz	r2, r2
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	40d3      	lsrs	r3, r2
 8003b6c:	4a04      	ldr	r2, [pc, #16]	@ (8003b80 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003b6e:	5cd3      	ldrb	r3, [r2, r3]
 8003b70:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003b74:	4618      	mov	r0, r3
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	08004344 	.word	0x08004344

08003b84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e040      	b.n	8003c18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d106      	bne.n	8003bac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7fd fb64 	bl	8001274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2224      	movs	r2, #36	@ 0x24
 8003bb0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0201 	bic.w	r2, r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f95e 	bl	8003e8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f825 	bl	8003c20 <UART_SetConfig>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e01b      	b.n	8003c18 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0201 	orr.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f9dd 	bl	8003fd0 <UART_CheckIdleState>
 8003c16:	4603      	mov	r3, r0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	431a      	orrs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	4b8a      	ldr	r3, [pc, #552]	@ (8003e74 <UART_SetConfig+0x254>)
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6812      	ldr	r2, [r2, #0]
 8003c52:	6979      	ldr	r1, [r7, #20]
 8003c54:	430b      	orrs	r3, r1
 8003c56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a78      	ldr	r2, [pc, #480]	@ (8003e78 <UART_SetConfig+0x258>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d120      	bne.n	8003cde <UART_SetConfig+0xbe>
 8003c9c:	4b77      	ldr	r3, [pc, #476]	@ (8003e7c <UART_SetConfig+0x25c>)
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca0:	f003 0303 	and.w	r3, r3, #3
 8003ca4:	2b03      	cmp	r3, #3
 8003ca6:	d817      	bhi.n	8003cd8 <UART_SetConfig+0xb8>
 8003ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8003cb0 <UART_SetConfig+0x90>)
 8003caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cae:	bf00      	nop
 8003cb0:	08003cc1 	.word	0x08003cc1
 8003cb4:	08003ccd 	.word	0x08003ccd
 8003cb8:	08003cd3 	.word	0x08003cd3
 8003cbc:	08003cc7 	.word	0x08003cc7
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	77fb      	strb	r3, [r7, #31]
 8003cc4:	e01d      	b.n	8003d02 <UART_SetConfig+0xe2>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	77fb      	strb	r3, [r7, #31]
 8003cca:	e01a      	b.n	8003d02 <UART_SetConfig+0xe2>
 8003ccc:	2304      	movs	r3, #4
 8003cce:	77fb      	strb	r3, [r7, #31]
 8003cd0:	e017      	b.n	8003d02 <UART_SetConfig+0xe2>
 8003cd2:	2308      	movs	r3, #8
 8003cd4:	77fb      	strb	r3, [r7, #31]
 8003cd6:	e014      	b.n	8003d02 <UART_SetConfig+0xe2>
 8003cd8:	2310      	movs	r3, #16
 8003cda:	77fb      	strb	r3, [r7, #31]
 8003cdc:	e011      	b.n	8003d02 <UART_SetConfig+0xe2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a67      	ldr	r2, [pc, #412]	@ (8003e80 <UART_SetConfig+0x260>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d102      	bne.n	8003cee <UART_SetConfig+0xce>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	77fb      	strb	r3, [r7, #31]
 8003cec:	e009      	b.n	8003d02 <UART_SetConfig+0xe2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a64      	ldr	r2, [pc, #400]	@ (8003e84 <UART_SetConfig+0x264>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d102      	bne.n	8003cfe <UART_SetConfig+0xde>
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	77fb      	strb	r3, [r7, #31]
 8003cfc:	e001      	b.n	8003d02 <UART_SetConfig+0xe2>
 8003cfe:	2310      	movs	r3, #16
 8003d00:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d0a:	d15a      	bne.n	8003dc2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003d0c:	7ffb      	ldrb	r3, [r7, #31]
 8003d0e:	2b08      	cmp	r3, #8
 8003d10:	d827      	bhi.n	8003d62 <UART_SetConfig+0x142>
 8003d12:	a201      	add	r2, pc, #4	@ (adr r2, 8003d18 <UART_SetConfig+0xf8>)
 8003d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d18:	08003d3d 	.word	0x08003d3d
 8003d1c:	08003d45 	.word	0x08003d45
 8003d20:	08003d4d 	.word	0x08003d4d
 8003d24:	08003d63 	.word	0x08003d63
 8003d28:	08003d53 	.word	0x08003d53
 8003d2c:	08003d63 	.word	0x08003d63
 8003d30:	08003d63 	.word	0x08003d63
 8003d34:	08003d63 	.word	0x08003d63
 8003d38:	08003d5b 	.word	0x08003d5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d3c:	f7ff fede 	bl	8003afc <HAL_RCC_GetPCLK1Freq>
 8003d40:	61b8      	str	r0, [r7, #24]
        break;
 8003d42:	e013      	b.n	8003d6c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d44:	f7ff fefc 	bl	8003b40 <HAL_RCC_GetPCLK2Freq>
 8003d48:	61b8      	str	r0, [r7, #24]
        break;
 8003d4a:	e00f      	b.n	8003d6c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d4c:	4b4e      	ldr	r3, [pc, #312]	@ (8003e88 <UART_SetConfig+0x268>)
 8003d4e:	61bb      	str	r3, [r7, #24]
        break;
 8003d50:	e00c      	b.n	8003d6c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d52:	f7ff fe73 	bl	8003a3c <HAL_RCC_GetSysClockFreq>
 8003d56:	61b8      	str	r0, [r7, #24]
        break;
 8003d58:	e008      	b.n	8003d6c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d5e:	61bb      	str	r3, [r7, #24]
        break;
 8003d60:	e004      	b.n	8003d6c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003d62:	2300      	movs	r3, #0
 8003d64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	77bb      	strb	r3, [r7, #30]
        break;
 8003d6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d074      	beq.n	8003e5c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	005a      	lsls	r2, r3, #1
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	085b      	lsrs	r3, r3, #1
 8003d7c:	441a      	add	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	2b0f      	cmp	r3, #15
 8003d8c:	d916      	bls.n	8003dbc <UART_SetConfig+0x19c>
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d94:	d212      	bcs.n	8003dbc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	f023 030f 	bic.w	r3, r3, #15
 8003d9e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	085b      	lsrs	r3, r3, #1
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	89fb      	ldrh	r3, [r7, #14]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	89fa      	ldrh	r2, [r7, #14]
 8003db8:	60da      	str	r2, [r3, #12]
 8003dba:	e04f      	b.n	8003e5c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	77bb      	strb	r3, [r7, #30]
 8003dc0:	e04c      	b.n	8003e5c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003dc2:	7ffb      	ldrb	r3, [r7, #31]
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d828      	bhi.n	8003e1a <UART_SetConfig+0x1fa>
 8003dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd0 <UART_SetConfig+0x1b0>)
 8003dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dce:	bf00      	nop
 8003dd0:	08003df5 	.word	0x08003df5
 8003dd4:	08003dfd 	.word	0x08003dfd
 8003dd8:	08003e05 	.word	0x08003e05
 8003ddc:	08003e1b 	.word	0x08003e1b
 8003de0:	08003e0b 	.word	0x08003e0b
 8003de4:	08003e1b 	.word	0x08003e1b
 8003de8:	08003e1b 	.word	0x08003e1b
 8003dec:	08003e1b 	.word	0x08003e1b
 8003df0:	08003e13 	.word	0x08003e13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003df4:	f7ff fe82 	bl	8003afc <HAL_RCC_GetPCLK1Freq>
 8003df8:	61b8      	str	r0, [r7, #24]
        break;
 8003dfa:	e013      	b.n	8003e24 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dfc:	f7ff fea0 	bl	8003b40 <HAL_RCC_GetPCLK2Freq>
 8003e00:	61b8      	str	r0, [r7, #24]
        break;
 8003e02:	e00f      	b.n	8003e24 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e04:	4b20      	ldr	r3, [pc, #128]	@ (8003e88 <UART_SetConfig+0x268>)
 8003e06:	61bb      	str	r3, [r7, #24]
        break;
 8003e08:	e00c      	b.n	8003e24 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e0a:	f7ff fe17 	bl	8003a3c <HAL_RCC_GetSysClockFreq>
 8003e0e:	61b8      	str	r0, [r7, #24]
        break;
 8003e10:	e008      	b.n	8003e24 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e16:	61bb      	str	r3, [r7, #24]
        break;
 8003e18:	e004      	b.n	8003e24 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	77bb      	strb	r3, [r7, #30]
        break;
 8003e22:	bf00      	nop
    }

    if (pclk != 0U)
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d018      	beq.n	8003e5c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	085a      	lsrs	r2, r3, #1
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	441a      	add	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	2b0f      	cmp	r3, #15
 8003e42:	d909      	bls.n	8003e58 <UART_SetConfig+0x238>
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e4a:	d205      	bcs.n	8003e58 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	60da      	str	r2, [r3, #12]
 8003e56:	e001      	b.n	8003e5c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003e68:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3720      	adds	r7, #32
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	efff69f3 	.word	0xefff69f3
 8003e78:	40013800 	.word	0x40013800
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	40004400 	.word	0x40004400
 8003e84:	40004800 	.word	0x40004800
 8003e88:	007a1200 	.word	0x007a1200

08003e8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efe:	f003 0304 	and.w	r3, r3, #4
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f20:	f003 0310 	and.w	r3, r3, #16
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f42:	f003 0320 	and.w	r3, r3, #32
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d01a      	beq.n	8003fa2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f8a:	d10a      	bne.n	8003fa2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	605a      	str	r2, [r3, #4]
  }
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b098      	sub	sp, #96	@ 0x60
 8003fd4:	af02      	add	r7, sp, #8
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fe0:	f7fd fa7a 	bl	80014d8 <HAL_GetTick>
 8003fe4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0308 	and.w	r3, r3, #8
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d12e      	bne.n	8004052 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ff4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f88c 	bl	8004120 <UART_WaitOnFlagUntilTimeout>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d021      	beq.n	8004052 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004016:	e853 3f00 	ldrex	r3, [r3]
 800401a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800401c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800401e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004022:	653b      	str	r3, [r7, #80]	@ 0x50
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	461a      	mov	r2, r3
 800402a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800402c:	647b      	str	r3, [r7, #68]	@ 0x44
 800402e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004030:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004032:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004034:	e841 2300 	strex	r3, r2, [r1]
 8004038:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800403a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1e6      	bne.n	800400e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2220      	movs	r2, #32
 8004044:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e062      	b.n	8004118 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b04      	cmp	r3, #4
 800405e:	d149      	bne.n	80040f4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004060:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004068:	2200      	movs	r2, #0
 800406a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f856 	bl	8004120 <UART_WaitOnFlagUntilTimeout>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d03c      	beq.n	80040f4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004082:	e853 3f00 	ldrex	r3, [r3]
 8004086:	623b      	str	r3, [r7, #32]
   return(result);
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800408e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	461a      	mov	r2, r3
 8004096:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004098:	633b      	str	r3, [r7, #48]	@ 0x30
 800409a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800409e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040a0:	e841 2300 	strex	r3, r2, [r1]
 80040a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1e6      	bne.n	800407a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3308      	adds	r3, #8
 80040b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	e853 3f00 	ldrex	r3, [r3]
 80040ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 0301 	bic.w	r3, r3, #1
 80040c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	3308      	adds	r3, #8
 80040ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040cc:	61fa      	str	r2, [r7, #28]
 80040ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d0:	69b9      	ldr	r1, [r7, #24]
 80040d2:	69fa      	ldr	r2, [r7, #28]
 80040d4:	e841 2300 	strex	r3, r2, [r1]
 80040d8:	617b      	str	r3, [r7, #20]
   return(result);
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1e5      	bne.n	80040ac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e011      	b.n	8004118 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2220      	movs	r2, #32
 80040fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3758      	adds	r7, #88	@ 0x58
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	603b      	str	r3, [r7, #0]
 800412c:	4613      	mov	r3, r2
 800412e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004130:	e04f      	b.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004138:	d04b      	beq.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800413a:	f7fd f9cd 	bl	80014d8 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	429a      	cmp	r2, r3
 8004148:	d302      	bcc.n	8004150 <UART_WaitOnFlagUntilTimeout+0x30>
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e04e      	b.n	80041f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0304 	and.w	r3, r3, #4
 800415e:	2b00      	cmp	r3, #0
 8004160:	d037      	beq.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2b80      	cmp	r3, #128	@ 0x80
 8004166:	d034      	beq.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2b40      	cmp	r3, #64	@ 0x40
 800416c:	d031      	beq.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	f003 0308 	and.w	r3, r3, #8
 8004178:	2b08      	cmp	r3, #8
 800417a:	d110      	bne.n	800419e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2208      	movs	r2, #8
 8004182:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f000 f838 	bl	80041fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2208      	movs	r2, #8
 800418e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e029      	b.n	80041f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041ac:	d111      	bne.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80041b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 f81e 	bl	80041fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2220      	movs	r2, #32
 80041c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e00f      	b.n	80041f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	69da      	ldr	r2, [r3, #28]
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	4013      	ands	r3, r2
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	429a      	cmp	r2, r3
 80041e0:	bf0c      	ite	eq
 80041e2:	2301      	moveq	r3, #1
 80041e4:	2300      	movne	r3, #0
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	461a      	mov	r2, r3
 80041ea:	79fb      	ldrb	r3, [r7, #7]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d0a0      	beq.n	8004132 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b095      	sub	sp, #84	@ 0x54
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800420a:	e853 3f00 	ldrex	r3, [r3]
 800420e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004212:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004216:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	461a      	mov	r2, r3
 800421e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004220:	643b      	str	r3, [r7, #64]	@ 0x40
 8004222:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004224:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004226:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004228:	e841 2300 	strex	r3, r2, [r1]
 800422c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800422e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1e6      	bne.n	8004202 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	3308      	adds	r3, #8
 800423a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423c:	6a3b      	ldr	r3, [r7, #32]
 800423e:	e853 3f00 	ldrex	r3, [r3]
 8004242:	61fb      	str	r3, [r7, #28]
   return(result);
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	f023 0301 	bic.w	r3, r3, #1
 800424a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3308      	adds	r3, #8
 8004252:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004254:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004256:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004258:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800425a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800425c:	e841 2300 	strex	r3, r2, [r1]
 8004260:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1e5      	bne.n	8004234 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800426c:	2b01      	cmp	r3, #1
 800426e:	d118      	bne.n	80042a2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	e853 3f00 	ldrex	r3, [r3]
 800427c:	60bb      	str	r3, [r7, #8]
   return(result);
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f023 0310 	bic.w	r3, r3, #16
 8004284:	647b      	str	r3, [r7, #68]	@ 0x44
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	461a      	mov	r2, r3
 800428c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800428e:	61bb      	str	r3, [r7, #24]
 8004290:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004292:	6979      	ldr	r1, [r7, #20]
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	e841 2300 	strex	r3, r2, [r1]
 800429a:	613b      	str	r3, [r7, #16]
   return(result);
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1e6      	bne.n	8004270 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80042b6:	bf00      	nop
 80042b8:	3754      	adds	r7, #84	@ 0x54
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <memset>:
 80042c2:	4402      	add	r2, r0
 80042c4:	4603      	mov	r3, r0
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d100      	bne.n	80042cc <memset+0xa>
 80042ca:	4770      	bx	lr
 80042cc:	f803 1b01 	strb.w	r1, [r3], #1
 80042d0:	e7f9      	b.n	80042c6 <memset+0x4>
	...

080042d4 <__libc_init_array>:
 80042d4:	b570      	push	{r4, r5, r6, lr}
 80042d6:	4d0d      	ldr	r5, [pc, #52]	@ (800430c <__libc_init_array+0x38>)
 80042d8:	4c0d      	ldr	r4, [pc, #52]	@ (8004310 <__libc_init_array+0x3c>)
 80042da:	1b64      	subs	r4, r4, r5
 80042dc:	10a4      	asrs	r4, r4, #2
 80042de:	2600      	movs	r6, #0
 80042e0:	42a6      	cmp	r6, r4
 80042e2:	d109      	bne.n	80042f8 <__libc_init_array+0x24>
 80042e4:	4d0b      	ldr	r5, [pc, #44]	@ (8004314 <__libc_init_array+0x40>)
 80042e6:	4c0c      	ldr	r4, [pc, #48]	@ (8004318 <__libc_init_array+0x44>)
 80042e8:	f000 f818 	bl	800431c <_init>
 80042ec:	1b64      	subs	r4, r4, r5
 80042ee:	10a4      	asrs	r4, r4, #2
 80042f0:	2600      	movs	r6, #0
 80042f2:	42a6      	cmp	r6, r4
 80042f4:	d105      	bne.n	8004302 <__libc_init_array+0x2e>
 80042f6:	bd70      	pop	{r4, r5, r6, pc}
 80042f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80042fc:	4798      	blx	r3
 80042fe:	3601      	adds	r6, #1
 8004300:	e7ee      	b.n	80042e0 <__libc_init_array+0xc>
 8004302:	f855 3b04 	ldr.w	r3, [r5], #4
 8004306:	4798      	blx	r3
 8004308:	3601      	adds	r6, #1
 800430a:	e7f2      	b.n	80042f2 <__libc_init_array+0x1e>
 800430c:	0800436c 	.word	0x0800436c
 8004310:	0800436c 	.word	0x0800436c
 8004314:	0800436c 	.word	0x0800436c
 8004318:	08004370 	.word	0x08004370

0800431c <_init>:
 800431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431e:	bf00      	nop
 8004320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004322:	bc08      	pop	{r3}
 8004324:	469e      	mov	lr, r3
 8004326:	4770      	bx	lr

08004328 <_fini>:
 8004328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800432a:	bf00      	nop
 800432c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800432e:	bc08      	pop	{r3}
 8004330:	469e      	mov	lr, r3
 8004332:	4770      	bx	lr
